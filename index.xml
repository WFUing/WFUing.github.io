<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>WFUing on WFUing&#39;s Blog</title>
    <link>https://WFUing.github.io/</link>
    <description>Recent content in WFUing on WFUing&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>© 2024 WFUing</copyright>
    <lastBuildDate>Fri, 01 Sep 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://WFUing.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>大数据物理设备介绍</title>
      <link>https://WFUing.github.io/posts/skills/big-data-hardware/</link>
      <pubDate>Sun, 25 Feb 2024 10:46:05 +0800</pubDate>
      
      <guid>https://WFUing.github.io/posts/skills/big-data-hardware/</guid>
      <description>大数据（big data），指无法在一定时间范围内用常规软件工具进行捕捉、管理和处理的数据集合，是需要新处理模式才能具有更强的决策力、洞察发现力和流程优化能力的海量、高增长率和多样化的信息资产。</description>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://WFUing.github.io/posts/skills/big-data-hardware/featured.png" />
    </item>
    
    <item>
      <title>Hadoop-HDFS</title>
      <link>https://WFUing.github.io/posts/architecture/distributed/hadoop/hdfs/</link>
      <pubDate>Sun, 25 Feb 2024 09:46:05 +0800</pubDate>
      
      <guid>https://WFUing.github.io/posts/architecture/distributed/hadoop/hdfs/</guid>
      <description>HDFS是Hadoop Distribute File System 的简称，意为Hadoop分布式文件系统。是Hadoop核心组件之一，作为最底层的分布式存储服务而存在。分布式文件系统解决的问题就是大数据存储。它们是横跨在多台计算机上的存储系统。分布式文件系统在大数据时代有着广泛的应用前景，它们为存储和处理超大规模数据提供所需的扩展能力。</description>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://WFUing.github.io/posts/architecture/distributed/hadoop/hdfs/featured.png" />
    </item>
    
    <item>
      <title>java面经-MQ篇</title>
      <link>https://WFUing.github.io/posts/language/java/%E9%9D%A2%E7%BB%8F%E7%BC%A9%E5%87%8F%E7%89%88/mq%E7%AF%87/</link>
      <pubDate>Thu, 22 Feb 2024 13:15:08 +0800</pubDate>
      
      <guid>https://WFUing.github.io/posts/language/java/%E9%9D%A2%E7%BB%8F%E7%BC%A9%E5%87%8F%E7%89%88/mq%E7%AF%87/</guid>
      <description>Java MQ（消息队列）是一种在分布式系统中用于实现异步通信的机制。它允许应用程序之间通过发送和接收消息进行通信，提供了解耦、异步、削峰填谷等特性，适用于解决分布式系统中的各种通信和协作问题。常见的 Java MQ 实现包括 RabbitMQ、ActiveMQ、Kafka 等，它们具有不同的特点和适用场景，可根据实际需求选择合适的实现。</description>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://WFUing.github.io/posts/language/java/%E9%9D%A2%E7%BB%8F%E7%BC%A9%E5%87%8F%E7%89%88/mq%E7%AF%87/featured.png" />
    </item>
    
    <item>
      <title>java面经-JVM篇</title>
      <link>https://WFUing.github.io/posts/language/java/%E9%9D%A2%E7%BB%8F%E7%BC%A9%E5%87%8F%E7%89%88/jvm%E7%AF%87/</link>
      <pubDate>Thu, 22 Feb 2024 10:15:08 +0800</pubDate>
      
      <guid>https://WFUing.github.io/posts/language/java/%E9%9D%A2%E7%BB%8F%E7%BC%A9%E5%87%8F%E7%89%88/jvm%E7%AF%87/</guid>
      <description>Java虚拟机（JVM）是Java程序的运行环境，负责将Java字节码解释或编译为本地机器代码，并提供垃圾回收、内存管理等功能。JVM包括类加载器、执行引擎、内存区域、垃圾回收器等组件，可在不同平台上运行Java程序，实现“一次编写，到处运行”的跨平台特性。通过JVM，Java程序实现了与平台无关的特性，提高了开发效率和代码的可移植性。</description>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://WFUing.github.io/posts/language/java/%E9%9D%A2%E7%BB%8F%E7%BC%A9%E5%87%8F%E7%89%88/jvm%E7%AF%87/featured.png" />
    </item>
    
    <item>
      <title>java面经-网络篇</title>
      <link>https://WFUing.github.io/posts/language/java/%E9%9D%A2%E7%BB%8F%E7%BC%A9%E5%87%8F%E7%89%88/%E7%BD%91%E7%BB%9C%E7%AF%87/</link>
      <pubDate>Thu, 22 Feb 2024 10:15:08 +0800</pubDate>
      
      <guid>https://WFUing.github.io/posts/language/java/%E9%9D%A2%E7%BB%8F%E7%BC%A9%E5%87%8F%E7%89%88/%E7%BD%91%E7%BB%9C%E7%AF%87/</guid>
      <description>Java网络编程提供了一套强大的API，支持TCP、UDP、HTTP等协议。通过Socket和ServerSocket实现客户端与服务器的通信。NIO提供非阻塞IO，提高并发处理能力。URL、URLConnection可用于HTTP操作。Java的网络编程简洁、灵活，适用于构建各种网络应用，如Web服务器、网络爬虫等。</description>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://WFUing.github.io/posts/language/java/%E9%9D%A2%E7%BB%8F%E7%BC%A9%E5%87%8F%E7%89%88/%E7%BD%91%E7%BB%9C%E7%AF%87/featured.png" />
    </item>
    
    <item>
      <title>java面经-并发篇</title>
      <link>https://WFUing.github.io/posts/language/java/%E9%9D%A2%E7%BB%8F%E7%BC%A9%E5%87%8F%E7%89%88/%E5%B9%B6%E5%8F%91%E7%AF%87/</link>
      <pubDate>Wed, 21 Feb 2024 20:15:08 +0800</pubDate>
      
      <guid>https://WFUing.github.io/posts/language/java/%E9%9D%A2%E7%BB%8F%E7%BC%A9%E5%87%8F%E7%89%88/%E5%B9%B6%E5%8F%91%E7%AF%87/</guid>
      <description>Java并发指的是在Java程序中同时执行多个任务的能力。通过多线程、同步机制、锁、线程池等工具，Java提供了丰富的并发编程支持。并发编程可以提高程序性能和资源利用率，但也面临线程安全、死锁等问题。Java并发编程涉及线程创建、管理、通信、同步等方面，包括使用synchronized关键字、Lock接口、线程池、并发集合等技术来实现并发控制和数据共享。</description>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://WFUing.github.io/posts/language/java/%E9%9D%A2%E7%BB%8F%E7%BC%A9%E5%87%8F%E7%89%88/%E5%B9%B6%E5%8F%91%E7%AF%87/featured.png" />
    </item>
    
    <item>
      <title>Spring MVC常用注解</title>
      <link>https://WFUing.github.io/posts/language/java/spring/spring-mvc%E5%B8%B8%E7%94%A8%E6%B3%A8%E8%A7%A3/</link>
      <pubDate>Wed, 21 Feb 2024 16:15:08 +0800</pubDate>
      
      <guid>https://WFUing.github.io/posts/language/java/spring/spring-mvc%E5%B8%B8%E7%94%A8%E6%B3%A8%E8%A7%A3/</guid>
      <description>Spring MVC 是一个基于 Java 的 Web 应用开发框架，它通过提供模型-视图-控制器（MVC）架构来简化 Web 开发。Spring MVC 充分利用了依赖注入和面向切面编程等特性，使得开发者能够轻松地构建灵活、模块化的 Web 应用。</description>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://WFUing.github.io/posts/language/java/spring/spring-mvc%E5%B8%B8%E7%94%A8%E6%B3%A8%E8%A7%A3/featured.png" />
    </item>
    
    <item>
      <title>VO、DTO、BO、PO、DO区别</title>
      <link>https://WFUing.github.io/posts/language/java/vodtobopodo%E5%8C%BA%E5%88%AB/</link>
      <pubDate>Sat, 17 Feb 2024 16:15:08 +0800</pubDate>
      
      <guid>https://WFUing.github.io/posts/language/java/vodtobopodo%E5%8C%BA%E5%88%AB/</guid>
      <description>VO（View Object）视图对象；DTO（Data Transfer Object）数据传输对象；BO（Business Object）业务层对象；PO（Persistent Object）持久化对象；DO（Domain Object）领域对象。</description>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://WFUing.github.io/posts/language/java/vodtobopodo%E5%8C%BA%E5%88%AB/featured.png" />
    </item>
    
    <item>
      <title>Spring中Bean的生命周期</title>
      <link>https://WFUing.github.io/posts/language/java/spring/spring%E4%B8%ADbean%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</link>
      <pubDate>Thu, 15 Feb 2024 16:15:08 +0800</pubDate>
      
      <guid>https://WFUing.github.io/posts/language/java/spring/spring%E4%B8%ADbean%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</guid>
      <description>对于普通的Java对象，当new的时候创建对象，当它没有任何引用的时候被垃圾回收机制回收。 而由Spring IoC容器托管的对象，它们的生命周期完全由容器控制。 概括Spring中Bean的生命周期 # Spring中每个Bean的生命周期如下：</description>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://WFUing.github.io/posts/language/java/spring/spring%E4%B8%ADbean%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/featured.png" />
    </item>
    
    <item>
      <title>滑动窗口技巧</title>
      <link>https://WFUing.github.io/posts/algorithm/leetcode%E7%AE%97%E6%B3%95%E6%8A%80%E5%B7%A7/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%E7%AE%97%E6%B3%95/</link>
      <pubDate>Wed, 14 Feb 2024 12:51:58 +0800</pubDate>
      
      <guid>https://WFUing.github.io/posts/algorithm/leetcode%E7%AE%97%E6%B3%95%E6%8A%80%E5%B7%A7/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%E7%AE%97%E6%B3%95/</guid>
      <description>滑动窗口技巧的思路非常简单，就是维护一个窗口，不断滑动，然后更新答案。LeetCode 上有起码 10 道运用滑动窗口算法的题目，难度都是中等和困难。</description>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://WFUing.github.io/posts/algorithm/leetcode%E7%AE%97%E6%B3%95%E6%8A%80%E5%B7%A7/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%E7%AE%97%E6%B3%95/featured.png" />
    </item>
    
    <item>
      <title>Spring Boot 的核心注解</title>
      <link>https://WFUing.github.io/posts/language/java/spring/spring-boot-%E7%9A%84%E6%A0%B8%E5%BF%83%E6%B3%A8%E8%A7%A3/</link>
      <pubDate>Wed, 07 Feb 2024 16:15:08 +0800</pubDate>
      
      <guid>https://WFUing.github.io/posts/language/java/spring/spring-boot-%E7%9A%84%E6%A0%B8%E5%BF%83%E6%B3%A8%E8%A7%A3/</guid>
      <description>Spring Boot 是一种快速开发应用程序的框架，提供了一系列的注解来简化开发过程。其中，最重要的就是核心注解，它能帮助开发者快速配置应用程序。本文将深入探讨 Spring Boot 的核心注解，介绍它的作用以及常见的组成注解。</description>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://WFUing.github.io/posts/language/java/spring/spring-boot-%E7%9A%84%E6%A0%B8%E5%BF%83%E6%B3%A8%E8%A7%A3/featured.jpeg" />
    </item>
    
    <item>
      <title>java元注解@interface</title>
      <link>https://WFUing.github.io/posts/language/java/java%E5%85%83%E6%B3%A8%E8%A7%A3@interface/</link>
      <pubDate>Wed, 07 Feb 2024 15:15:08 +0800</pubDate>
      
      <guid>https://WFUing.github.io/posts/language/java/java%E5%85%83%E6%B3%A8%E8%A7%A3@interface/</guid>
      <description>注解（Annontion）是Java5开始引入的新特征。它提供了一种安全的类似注释的机制，用来将任何的信息或元数据（metadata）与程序元素（类、方法、成员变量等）进行关联。元注解的作用就是负责注解其他注解。</description>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://WFUing.github.io/posts/language/java/java%E5%85%83%E6%B3%A8%E8%A7%A3@interface/featured.png" />
    </item>
    
    <item>
      <title>高级软件设计复习</title>
      <link>https://WFUing.github.io/posts/%E7%A0%94%E7%A9%B6%E7%94%9F%E5%A4%8D%E4%B9%A0/%E9%AB%98%E7%BA%A7%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1/</link>
      <pubDate>Sun, 31 Dec 2023 13:53:28 +0800</pubDate>
      
      <guid>https://WFUing.github.io/posts/%E7%A0%94%E7%A9%B6%E7%94%9F%E5%A4%8D%E4%B9%A0/%E9%AB%98%E7%BA%A7%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1/</guid>
      <description>南京大学软件学院高级软件设计简答题部分复习</description>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://WFUing.github.io/posts/%E7%A0%94%E7%A9%B6%E7%94%9F%E5%A4%8D%E4%B9%A0/%E9%AB%98%E7%BA%A7%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1/featured.png" />
    </item>
    
    <item>
      <title>设计模式-目录</title>
      <link>https://WFUing.github.io/posts/design-pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%9B%AE%E5%BD%95/</link>
      <pubDate>Sun, 31 Dec 2023 13:50:15 +0800</pubDate>
      
      <guid>https://WFUing.github.io/posts/design-pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%9B%AE%E5%BD%95/</guid>
      <description>设计模式是解决问题的方案，学习现有的设计模式可以做到经验复用。拥有设计模式词汇，在沟通时就能用更少的词汇来讨论，并且不需要了解底层细节。</description>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://WFUing.github.io/posts/design-pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%9B%AE%E5%BD%95/featured.jpeg" />
    </item>
    
    <item>
      <title>设计模式 - 中介者</title>
      <link>https://WFUing.github.io/posts/design-pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F---%E4%B8%AD%E4%BB%8B%E8%80%85/</link>
      <pubDate>Sun, 31 Dec 2023 12:51:59 +0800</pubDate>
      
      <guid>https://WFUing.github.io/posts/design-pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F---%E4%B8%AD%E4%BB%8B%E8%80%85/</guid>
      <description>集中相关对象之间复杂的沟通和控制方式。</description>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://WFUing.github.io/posts/design-pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F---%E4%B8%AD%E4%BB%8B%E8%80%85/featured.png" />
    </item>
    
    <item>
      <title>设计模式 - 原型模式</title>
      <link>https://WFUing.github.io/posts/design-pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F---%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Sun, 31 Dec 2023 12:51:59 +0800</pubDate>
      
      <guid>https://WFUing.github.io/posts/design-pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F---%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/</guid>
      <description>使用原型实例指定要创建对象的类型，通过复制这个原型来创建新对象。</description>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://WFUing.github.io/posts/design-pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F---%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/featured.png" />
    </item>
    
    <item>
      <title>设计模式 - 备忘录</title>
      <link>https://WFUing.github.io/posts/design-pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F---%E5%A4%87%E5%BF%98%E5%BD%95/</link>
      <pubDate>Sun, 31 Dec 2023 12:51:59 +0800</pubDate>
      
      <guid>https://WFUing.github.io/posts/design-pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F---%E5%A4%87%E5%BF%98%E5%BD%95/</guid>
      <description>在不违反封装的情况下获得对象的内部状态，从而在需要时可以将对象恢复到最初状态。</description>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://WFUing.github.io/posts/design-pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F---%E5%A4%87%E5%BF%98%E5%BD%95/featured.png" />
    </item>
    
    <item>
      <title>设计模式 - 工厂方法</title>
      <link>https://WFUing.github.io/posts/design-pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F---%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95/</link>
      <pubDate>Sun, 31 Dec 2023 12:51:59 +0800</pubDate>
      
      <guid>https://WFUing.github.io/posts/design-pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F---%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95/</guid>
      <description>定义了一个创建对象的接口，但由子类决定要实例化哪个类。工厂方法把实例化操作推迟到子类。</description>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://WFUing.github.io/posts/design-pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F---%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95/featured.png" />
    </item>
    
    <item>
      <title>设计模式 - 抽象工厂</title>
      <link>https://WFUing.github.io/posts/design-pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F---%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82/</link>
      <pubDate>Sun, 31 Dec 2023 12:51:59 +0800</pubDate>
      
      <guid>https://WFUing.github.io/posts/design-pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F---%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82/</guid>
      <description>提供一个接口，用于创建相关的对象家族。</description>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://WFUing.github.io/posts/design-pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F---%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82/featured.png" />
    </item>
    
    <item>
      <title>设计模式 - 模板方法</title>
      <link>https://WFUing.github.io/posts/design-pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F---%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95/</link>
      <pubDate>Sun, 31 Dec 2023 12:51:59 +0800</pubDate>
      
      <guid>https://WFUing.github.io/posts/design-pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F---%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95/</guid>
      <description>定义算法框架，并将一些步骤的实现延迟到子类。通过模板方法，子类可以重新定义算法的某些步骤，而不用改变算法的结构。</description>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://WFUing.github.io/posts/design-pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F---%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95/featured.png" />
    </item>
    
    <item>
      <title>设计模式 - 生成器</title>
      <link>https://WFUing.github.io/posts/design-pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F---%E7%94%9F%E6%88%90%E5%99%A8/</link>
      <pubDate>Sun, 31 Dec 2023 12:51:59 +0800</pubDate>
      
      <guid>https://WFUing.github.io/posts/design-pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F---%E7%94%9F%E6%88%90%E5%99%A8/</guid>
      <description>封装一个对象的构造过程，并允许按步骤构造。</description>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://WFUing.github.io/posts/design-pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F---%E7%94%9F%E6%88%90%E5%99%A8/featured.png" />
    </item>
    
    <item>
      <title>设计模式 - 空对象</title>
      <link>https://WFUing.github.io/posts/design-pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F---%E7%A9%BA%E5%AF%B9%E8%B1%A1/</link>
      <pubDate>Sun, 31 Dec 2023 12:51:59 +0800</pubDate>
      
      <guid>https://WFUing.github.io/posts/design-pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F---%E7%A9%BA%E5%AF%B9%E8%B1%A1/</guid>
      <description>使用什么都不做的空对象来代替 NULL。</description>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://WFUing.github.io/posts/design-pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F---%E7%A9%BA%E5%AF%B9%E8%B1%A1/featured.png" />
    </item>
    
    <item>
      <title>设计模式 - 策略</title>
      <link>https://WFUing.github.io/posts/design-pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F---%E7%AD%96%E7%95%A5/</link>
      <pubDate>Sun, 31 Dec 2023 12:51:59 +0800</pubDate>
      
      <guid>https://WFUing.github.io/posts/design-pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F---%E7%AD%96%E7%95%A5/</guid>
      <description>定义一系列算法，封装每个算法，并使它们可以互换。</description>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://WFUing.github.io/posts/design-pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F---%E7%AD%96%E7%95%A5/featured.png" />
    </item>
    
    <item>
      <title>设计模式 - 简单工厂</title>
      <link>https://WFUing.github.io/posts/design-pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F---%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82/</link>
      <pubDate>Sun, 31 Dec 2023 12:51:59 +0800</pubDate>
      
      <guid>https://WFUing.github.io/posts/design-pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F---%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82/</guid>
      <description>在创建一个对象时不向客户暴露内部细节，并提供一个创建对象的通用接口。</description>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://WFUing.github.io/posts/design-pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F---%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82/featured.png" />
    </item>
    
    <item>
      <title>设计模式 - 组合</title>
      <link>https://WFUing.github.io/posts/design-pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F---%E7%BB%84%E5%90%88/</link>
      <pubDate>Sun, 31 Dec 2023 12:51:59 +0800</pubDate>
      
      <guid>https://WFUing.github.io/posts/design-pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F---%E7%BB%84%E5%90%88/</guid>
      <description>将对象组合成树形结构来表示“整体/部分”层次关系，允许用户以相同的方式处理单独对象和组合对象。</description>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://WFUing.github.io/posts/design-pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F---%E7%BB%84%E5%90%88/featured.png" />
    </item>
    
    <item>
      <title>设计模式 - 装饰</title>
      <link>https://WFUing.github.io/posts/design-pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F---%E8%A3%85%E9%A5%B0/</link>
      <pubDate>Sun, 31 Dec 2023 12:51:59 +0800</pubDate>
      
      <guid>https://WFUing.github.io/posts/design-pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F---%E8%A3%85%E9%A5%B0/</guid>
      <description>为对象动态添加功能。</description>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://WFUing.github.io/posts/design-pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F---%E8%A3%85%E9%A5%B0/featured.png" />
    </item>
    
    <item>
      <title>设计模式 - 观察者</title>
      <link>https://WFUing.github.io/posts/design-pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F---%E8%A7%82%E5%AF%9F%E8%80%85/</link>
      <pubDate>Sun, 31 Dec 2023 12:51:59 +0800</pubDate>
      
      <guid>https://WFUing.github.io/posts/design-pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F---%E8%A7%82%E5%AF%9F%E8%80%85/</guid>
      <description>定义对象之间的一对多依赖，当一个对象状态改变时，它的所有依赖都会收到通知并且自动更新状态。</description>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://WFUing.github.io/posts/design-pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F---%E8%A7%82%E5%AF%9F%E8%80%85/featured.png" />
    </item>
    
    <item>
      <title>设计模式 - 解释器</title>
      <link>https://WFUing.github.io/posts/design-pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F---%E8%A7%A3%E9%87%8A%E5%99%A8/</link>
      <pubDate>Sun, 31 Dec 2023 12:51:59 +0800</pubDate>
      
      <guid>https://WFUing.github.io/posts/design-pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F---%E8%A7%A3%E9%87%8A%E5%99%A8/</guid>
      <description>为语言创建解释器，通常由语言的语法和语法分析来定义。</description>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://WFUing.github.io/posts/design-pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F---%E8%A7%A3%E9%87%8A%E5%99%A8/featured.png" />
    </item>
    
    <item>
      <title>设计模式 - 访问者</title>
      <link>https://WFUing.github.io/posts/design-pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F---%E8%AE%BF%E9%97%AE%E8%80%85/</link>
      <pubDate>Sun, 31 Dec 2023 12:51:59 +0800</pubDate>
      
      <guid>https://WFUing.github.io/posts/design-pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F---%E8%AE%BF%E9%97%AE%E8%80%85/</guid>
      <description>为一个对象结构（比如组合结构）增加新能力。</description>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://WFUing.github.io/posts/design-pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F---%E8%AE%BF%E9%97%AE%E8%80%85/featured.png" />
    </item>
    
    <item>
      <title>设计模式 - 责任链</title>
      <link>https://WFUing.github.io/posts/design-pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F---%E8%B4%A3%E4%BB%BB%E9%93%BE/</link>
      <pubDate>Sun, 31 Dec 2023 12:51:59 +0800</pubDate>
      
      <guid>https://WFUing.github.io/posts/design-pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F---%E8%B4%A3%E4%BB%BB%E9%93%BE/</guid>
      <description>使多个对象都有机会处理请求，从而避免请求的发送者和接收者之间的耦合关系。将这些对象连成一条链，并沿着这条链发送该请求，直到有一个对象处理它为止。</description>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://WFUing.github.io/posts/design-pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F---%E8%B4%A3%E4%BB%BB%E9%93%BE/featured.png" />
    </item>
    
    <item>
      <title>设计模式 - 迭代器</title>
      <link>https://WFUing.github.io/posts/design-pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F---%E8%BF%AD%E4%BB%A3%E5%99%A8/</link>
      <pubDate>Sun, 31 Dec 2023 12:51:59 +0800</pubDate>
      
      <guid>https://WFUing.github.io/posts/design-pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F---%E8%BF%AD%E4%BB%A3%E5%99%A8/</guid>
      <description>提供一种顺序访问聚合对象元素的方法，并且不暴露聚合对象的内部表示。</description>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://WFUing.github.io/posts/design-pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F---%E8%BF%AD%E4%BB%A3%E5%99%A8/featured.png" />
    </item>
    
    <item>
      <title>设计模式 - 适配器</title>
      <link>https://WFUing.github.io/posts/design-pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F---%E9%80%82%E9%85%8D%E5%99%A8/</link>
      <pubDate>Sun, 31 Dec 2023 12:51:59 +0800</pubDate>
      
      <guid>https://WFUing.github.io/posts/design-pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F---%E9%80%82%E9%85%8D%E5%99%A8/</guid>
      <description>把一个类接口转换成另一个用户需要的接口。</description>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://WFUing.github.io/posts/design-pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F---%E9%80%82%E9%85%8D%E5%99%A8/featured.png" />
    </item>
    
    <item>
      <title>设计模式 - 享元</title>
      <link>https://WFUing.github.io/posts/design-pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F---%E4%BA%AB%E5%85%83/</link>
      <pubDate>Sun, 31 Dec 2023 12:51:58 +0800</pubDate>
      
      <guid>https://WFUing.github.io/posts/design-pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F---%E4%BA%AB%E5%85%83/</guid>
      <description>利用共享的方式来支持大量细粒度的对象，这些对象一部分内部状态是相同的。</description>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://WFUing.github.io/posts/design-pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F---%E4%BA%AB%E5%85%83/featured.png" />
    </item>
    
    <item>
      <title>设计模式 - 代理</title>
      <link>https://WFUing.github.io/posts/design-pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F---%E4%BB%A3%E7%90%86/</link>
      <pubDate>Sun, 31 Dec 2023 12:51:58 +0800</pubDate>
      
      <guid>https://WFUing.github.io/posts/design-pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F---%E4%BB%A3%E7%90%86/</guid>
      <description>控制对其它对象的访问。</description>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://WFUing.github.io/posts/design-pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F---%E4%BB%A3%E7%90%86/featured.png" />
    </item>
    
    <item>
      <title>设计模式 - 单例</title>
      <link>https://WFUing.github.io/posts/design-pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F----%E5%8D%95%E4%BE%8B/</link>
      <pubDate>Sun, 31 Dec 2023 12:51:58 +0800</pubDate>
      
      <guid>https://WFUing.github.io/posts/design-pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F----%E5%8D%95%E4%BE%8B/</guid>
      <description>使用一个私有构造函数、一个私有静态变量以及一个公有静态函数来实现。私有构造函数保证了不能通过构造函数来创建对象实例，只能通过公有静态函数返回唯一的私有静态变量。</description>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://WFUing.github.io/posts/design-pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F----%E5%8D%95%E4%BE%8B/featured.png" />
    </item>
    
    <item>
      <title>设计模式 - 命令</title>
      <link>https://WFUing.github.io/posts/design-pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F---%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Sun, 31 Dec 2023 12:51:58 +0800</pubDate>
      
      <guid>https://WFUing.github.io/posts/design-pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F---%E5%91%BD%E4%BB%A4/</guid>
      <description>将命令封装成对象中</description>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://WFUing.github.io/posts/design-pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F---%E5%91%BD%E4%BB%A4/featured.png" />
    </item>
    
    <item>
      <title>设计模式 - 外观</title>
      <link>https://WFUing.github.io/posts/design-pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F---%E5%A4%96%E8%A7%82/</link>
      <pubDate>Sun, 31 Dec 2023 12:51:58 +0800</pubDate>
      
      <guid>https://WFUing.github.io/posts/design-pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F---%E5%A4%96%E8%A7%82/</guid>
      <description>提供了一个统一的接口，用来访问子系统中的一群接口，从而让子系统更容易使用。</description>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://WFUing.github.io/posts/design-pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F---%E5%A4%96%E8%A7%82/featured.png" />
    </item>
    
    <item>
      <title>设计模式 - 桥接</title>
      <link>https://WFUing.github.io/posts/design-pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F---%E6%A1%A5%E6%8E%A5/</link>
      <pubDate>Sun, 31 Dec 2023 12:51:58 +0800</pubDate>
      
      <guid>https://WFUing.github.io/posts/design-pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F---%E6%A1%A5%E6%8E%A5/</guid>
      <description>将抽象与实现分离开来，使它们可以独立变化。</description>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://WFUing.github.io/posts/design-pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F---%E6%A1%A5%E6%8E%A5/featured.png" />
    </item>
    
    <item>
      <title>设计模式 - 状态</title>
      <link>https://WFUing.github.io/posts/design-pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F---%E7%8A%B6%E6%80%81/</link>
      <pubDate>Sun, 31 Dec 2023 12:51:58 +0800</pubDate>
      
      <guid>https://WFUing.github.io/posts/design-pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F---%E7%8A%B6%E6%80%81/</guid>
      <description>允许对象在内部状态改变时改变它的行为，对象看起来好像修改了它所属的类。</description>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://WFUing.github.io/posts/design-pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F---%E7%8A%B6%E6%80%81/featured.png" />
    </item>
    
    <item>
      <title>数据仓库与知识发现名词解释</title>
      <link>https://WFUing.github.io/posts/%E7%A0%94%E7%A9%B6%E7%94%9F%E5%A4%8D%E4%B9%A0/%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93%E4%B8%8E%E7%9F%A5%E8%AF%86%E5%8F%91%E7%8E%B0/concept/</link>
      <pubDate>Sun, 24 Dec 2023 12:18:11 +0800</pubDate>
      
      <guid>https://WFUing.github.io/posts/%E7%A0%94%E7%A9%B6%E7%94%9F%E5%A4%8D%E4%B9%A0/%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93%E4%B8%8E%E7%9F%A5%E8%AF%86%E5%8F%91%E7%8E%B0/concept/</guid>
      <description>《数据仓库与知识发现》名词解释部分复习</description>
      
    </item>
    
    <item>
      <title>Apriori</title>
      <link>https://WFUing.github.io/posts/%E7%A0%94%E7%A9%B6%E7%94%9F%E5%A4%8D%E4%B9%A0/%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93%E4%B8%8E%E7%9F%A5%E8%AF%86%E5%8F%91%E7%8E%B0/apriori/</link>
      <pubDate>Sun, 24 Dec 2023 10:20:25 +0800</pubDate>
      
      <guid>https://WFUing.github.io/posts/%E7%A0%94%E7%A9%B6%E7%94%9F%E5%A4%8D%E4%B9%A0/%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93%E4%B8%8E%E7%9F%A5%E8%AF%86%E5%8F%91%E7%8E%B0/apriori/</guid>
      <description>Apriori 是一种用于关联规则挖掘的经典算法。关联规则挖掘是数据挖掘领域的一项重要任务，其目标是从大规模数据集中发现项集之间的关联关系。Apriori 算法是由Rakesh Agrawal 和 Ramakrishnan Srikant 在1994年提出的，它主要用于发现数据集中频繁出现的项集。</description>
      
    </item>
    
    <item>
      <title>《软件安全技术-机械工业出版社》复习笔记</title>
      <link>https://WFUing.github.io/posts/%E7%A0%94%E7%A9%B6%E7%94%9F%E5%A4%8D%E4%B9%A0/%E8%BD%AF%E4%BB%B6%E5%AE%89%E5%85%A8%E6%8A%80%E6%9C%AF/problems/</link>
      <pubDate>Fri, 22 Dec 2023 18:26:58 +0800</pubDate>
      
      <guid>https://WFUing.github.io/posts/%E7%A0%94%E7%A9%B6%E7%94%9F%E5%A4%8D%E4%B9%A0/%E8%BD%AF%E4%BB%B6%E5%AE%89%E5%85%A8%E6%8A%80%E6%9C%AF/problems/</guid>
      <description>南京大学软件学院软件安全复习资料</description>
      
    </item>
    
    <item>
      <title>cuelang 简介</title>
      <link>https://WFUing.github.io/posts/language/dsl/cuelang/</link>
      <pubDate>Sun, 17 Dec 2023 22:23:15 +0800</pubDate>
      
      <guid>https://WFUing.github.io/posts/language/dsl/cuelang/</guid>
      <description>CUE 是一种开源数据验证语言和推理引擎，源于逻辑编程。虽然该语言不是通用编程语言，但它有许多应用，如数据验证、数据模板、配置、查询、代码生成甚至脚本编写。推理引擎可用于验证代码中的数据，或将其作为代码生成管道的一部分。</description>
      
    </item>
    
    <item>
      <title>Data Preprocessing</title>
      <link>https://WFUing.github.io/posts/%E7%A0%94%E7%A9%B6%E7%94%9F%E5%A4%8D%E4%B9%A0/%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93%E4%B8%8E%E7%9F%A5%E8%AF%86%E5%8F%91%E7%8E%B0/data-preprocessing/</link>
      <pubDate>Sat, 16 Dec 2023 22:35:50 +0800</pubDate>
      
      <guid>https://WFUing.github.io/posts/%E7%A0%94%E7%A9%B6%E7%94%9F%E5%A4%8D%E4%B9%A0/%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93%E4%B8%8E%E7%9F%A5%E8%AF%86%E5%8F%91%E7%8E%B0/data-preprocessing/</guid>
      <description>现实世界中的数据存在不完整、有噪声、不一致的问题，没有高质量的数据，就没有高质量的挖掘结果！质量决策必须基于质量数据，数据仓库需要对质量数据进行一致的集成。</description>
      
    </item>
    
    <item>
      <title>Data Warehousing</title>
      <link>https://WFUing.github.io/posts/%E7%A0%94%E7%A9%B6%E7%94%9F%E5%A4%8D%E4%B9%A0/%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93%E4%B8%8E%E7%9F%A5%E8%AF%86%E5%8F%91%E7%8E%B0/data-warehousing/</link>
      <pubDate>Fri, 15 Dec 2023 10:29:14 +0800</pubDate>
      
      <guid>https://WFUing.github.io/posts/%E7%A0%94%E7%A9%B6%E7%94%9F%E5%A4%8D%E4%B9%A0/%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93%E4%B8%8E%E7%9F%A5%E8%AF%86%E5%8F%91%E7%8E%B0/data-warehousing/</guid>
      <description>数据仓库是一个面向主题的、集成的、时变的和非易失性的数据集合，支持管理决策过程。</description>
      
    </item>
    
    <item>
      <title>Flawfinder</title>
      <link>https://WFUing.github.io/posts/%E7%A0%94%E7%A9%B6%E7%94%9F%E5%A4%8D%E4%B9%A0/%E8%BD%AF%E4%BB%B6%E5%AE%89%E5%85%A8%E6%8A%80%E6%9C%AF/analysis/flawfinder/</link>
      <pubDate>Wed, 13 Dec 2023 14:53:59 +0800</pubDate>
      
      <guid>https://WFUing.github.io/posts/%E7%A0%94%E7%A9%B6%E7%94%9F%E5%A4%8D%E4%B9%A0/%E8%BD%AF%E4%BB%B6%E5%AE%89%E5%85%A8%E6%8A%80%E6%9C%AF/analysis/flawfinder/</guid>
      <description>Flawfinder主要用于查找C/C++代码中的安全漏洞，特别是与安全性相关的缺陷。</description>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://WFUing.github.io/posts/%E7%A0%94%E7%A9%B6%E7%94%9F%E5%A4%8D%E4%B9%A0/%E8%BD%AF%E4%BB%B6%E5%AE%89%E5%85%A8%E6%8A%80%E6%9C%AF/analysis/flawfinder/featured.png" />
    </item>
    
    <item>
      <title>Kythe Schema Overview</title>
      <link>https://WFUing.github.io/posts/%E7%A0%94%E7%A9%B6%E7%94%9F%E5%A4%8D%E4%B9%A0/%E8%BD%AF%E4%BB%B6%E5%AE%89%E5%85%A8%E6%8A%80%E6%9C%AF/analysis/kythe/</link>
      <pubDate>Wed, 13 Dec 2023 11:08:22 +0800</pubDate>
      
      <guid>https://WFUing.github.io/posts/%E7%A0%94%E7%A9%B6%E7%94%9F%E5%A4%8D%E4%B9%A0/%E8%BD%AF%E4%BB%B6%E5%AE%89%E5%85%A8%E6%8A%80%E6%9C%AF/analysis/kythe/</guid>
      <description>Kythe是一个开源软件工程生态系统，用于建立和维护大型代码库的跨语言代码索引。它提供了强大的代码导航和分析工具，支持多语言和多仓库项目。Kythe的目标是提高软件工程师的开发效率，使他们能够更轻松地理解和管理复杂的代码结构。</description>
      
    </item>
    
    <item>
      <title>Meta Key</title>
      <link>https://WFUing.github.io/posts/skills/meta/</link>
      <pubDate>Tue, 12 Dec 2023 11:22:18 +0800</pubDate>
      
      <guid>https://WFUing.github.io/posts/skills/meta/</guid>
      <description>Resources # How To Use Option As Meta Key In MacOS Terminal?</description>
      
    </item>
    
    <item>
      <title>Language Server Protocol 的工作原理</title>
      <link>https://WFUing.github.io/posts/language/lsp/lsp-principle/</link>
      <pubDate>Sun, 10 Dec 2023 13:21:20 +0800</pubDate>
      
      <guid>https://WFUing.github.io/posts/language/lsp/lsp-principle/</guid>
      <description>Language Server Protocol （语言服务器协议，简称 LSP）是微软于 2016 年提出的一套统一的通讯协议方案。该方案定义了一套编辑器或 IDE 与语言服务器之间使用的协议，该语言服务器提供自动完成、转到定义、查找所有引用等语言功能。</description>
      
    </item>
    
    <item>
      <title>Monaco Editor</title>
      <link>https://WFUing.github.io/posts/language/lsp/monaco-editor/</link>
      <pubDate>Sun, 10 Dec 2023 12:54:21 +0800</pubDate>
      
      <guid>https://WFUing.github.io/posts/language/lsp/monaco-editor/</guid>
      <description>Resources # 官网： https://microsoft.</description>
      
    </item>
    
    <item>
      <title>数据仓库与知识发现概览</title>
      <link>https://WFUing.github.io/posts/%E7%A0%94%E7%A9%B6%E7%94%9F%E5%A4%8D%E4%B9%A0/%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93%E4%B8%8E%E7%9F%A5%E8%AF%86%E5%8F%91%E7%8E%B0/overview/</link>
      <pubDate>Sat, 09 Dec 2023 10:14:52 +0800</pubDate>
      
      <guid>https://WFUing.github.io/posts/%E7%A0%94%E7%A9%B6%E7%94%9F%E5%A4%8D%E4%B9%A0/%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93%E4%B8%8E%E7%9F%A5%E8%AF%86%E5%8F%91%E7%8E%B0/overview/</guid>
      <description>数据挖掘（ Knowledge discovery(mining) in databases ，KDD）：从大型数据库中提取有趣（非平凡、隐含、先前未知且潜在有用）的信息或模式。</description>
      
    </item>
    
    <item>
      <title>《极限编程》读书笔记</title>
      <link>https://WFUing.github.io/read/%E6%9E%81%E9%99%90%E7%BC%96%E7%A8%8B/</link>
      <pubDate>Tue, 05 Dec 2023 13:16:22 +0800</pubDate>
      
      <guid>https://WFUing.github.io/read/%E6%9E%81%E9%99%90%E7%BC%96%E7%A8%8B/</guid>
      <description>主要介绍了极限编程（Extreme Programming，XP）的理念和实践方法。作者Kent Beck以问题为出发点，提出了解决软件开发中困扰人们的风险和成本问题的方法。书中分为两部分，第一部分探讨了问题，第二部分提出了解决方案。适合软件开发领域的从业者，尤其是团队领导者和项目经理。适用于那些希望改善软件开发流程、提高质量和降低成本的团队。</description>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://WFUing.github.io/read/%E6%9E%81%E9%99%90%E7%BC%96%E7%A8%8B/featured.png" />
    </item>
    
    <item>
      <title>使用 Kubevela 部署 mall-swarm 项目</title>
      <link>https://WFUing.github.io/posts/architecture/distributed/k8s/kubevela-mall-swarm/</link>
      <pubDate>Tue, 05 Dec 2023 10:27:02 +0800</pubDate>
      
      <guid>https://WFUing.github.io/posts/architecture/distributed/k8s/kubevela-mall-swarm/</guid>
      <description>本项目用kubevela部署mall-swarm，mall-swarm是一套微服务商城系统，采用了 Spring Cloud 2021 &amp;amp; Alibaba、Spring Boot 2.7、Oauth2、MyBatis、Elasticsearch、Docker、Kubernetes等核心技术。</description>
      
    </item>
    
    <item>
      <title>Ceph集群部署</title>
      <link>https://WFUing.github.io/posts/architecture/distributed/ceph/</link>
      <pubDate>Tue, 05 Dec 2023 09:46:05 +0800</pubDate>
      
      <guid>https://WFUing.github.io/posts/architecture/distributed/ceph/</guid>
      <description>Ceph是一种开源分布式存储系统，为大规模数据提供可扩展性和高性能。它使用分布式对象存储、块存储和文件系统，通过智能数据复制和动态数据分布，确保高可用性和容错性。Ceph的设计使其适用于云计算和大数据环境，提供灵活、可靠的存储解决方案，同时支持自动负载平衡和故障恢复。</description>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://WFUing.github.io/posts/architecture/distributed/ceph/featured.png" />
    </item>
    
    <item>
      <title>《凤凰项目》读书笔记</title>
      <link>https://WFUing.github.io/read/%E5%87%A4%E5%87%B0%E9%A1%B9%E7%9B%AE/</link>
      <pubDate>Tue, 28 Nov 2023 11:16:22 +0800</pubDate>
      
      <guid>https://WFUing.github.io/read/%E5%87%A4%E5%87%B0%E9%A1%B9%E7%9B%AE/</guid>
      <description>本书通过虚构的故事，介绍了IT运维和软件开发领域的最佳实践，强调快速交付、稳定运行、持续学习的三大支柱。以及业务、开发、IT运维、信息安全四个价值流的优化，倡导DevOps文化。面向IT从业者、软件开发人员、运维工程师等，适用于希望优化IT流程、提高交付效率的组织和个人。</description>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://WFUing.github.io/read/%E5%87%A4%E5%87%B0%E9%A1%B9%E7%9B%AE/featured.png" />
    </item>
    
    <item>
      <title>Kubevela</title>
      <link>https://WFUing.github.io/posts/architecture/distributed/k8s/kubevela/</link>
      <pubDate>Mon, 27 Nov 2023 16:11:01 +0800</pubDate>
      
      <guid>https://WFUing.github.io/posts/architecture/distributed/k8s/kubevela/</guid>
      <description>KubeVela 是一个开箱即用的现代化应用交付与管理平台，它使得应用在面向混合云环境中的交付更简单、快捷。使用 KubeVela 的软件开发团队，可以按需使用云原生能力构建应用，随着团队规模的发展、业务场景的变化扩展其功能，一次构建应用，随处运行。</description>
      
    </item>
    
    <item>
      <title>Open Application Model</title>
      <link>https://WFUing.github.io/posts/architecture/iac/oam/</link>
      <pubDate>Fri, 17 Nov 2023 09:21:20 +0800</pubDate>
      
      <guid>https://WFUing.github.io/posts/architecture/iac/oam/</guid>
      <description>Open Application Model 的目标是定义一种标准的、与基础设施无关的方法，用于描述跨混合环境、云甚至边缘设备的应用部署。该模型要解决的核心问题是如何组成分布式应用程序，然后成功地将其交给负责操作的人员。问题不在于如何编写程序，而在于如何采用面向服务（或面向微服务）架构的组件，并简化围绕此类应用的工作流程。</description>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://WFUing.github.io/posts/architecture/iac/oam/featured.png" />
    </item>
    
    <item>
      <title>iot 相关 dsl</title>
      <link>https://WFUing.github.io/posts/language/dsl/iot-dsl/</link>
      <pubDate>Thu, 16 Nov 2023 21:46:20 +0800</pubDate>
      
      <guid>https://WFUing.github.io/posts/language/dsl/iot-dsl/</guid>
      <description>vorto # InformationModel: &amp;#39;vortolang&amp;#39; 1.</description>
      
    </item>
    
    <item>
      <title>as a Service 模型</title>
      <link>https://WFUing.github.io/posts/architecture/aas/</link>
      <pubDate>Thu, 16 Nov 2023 16:47:45 +0800</pubDate>
      
      <guid>https://WFUing.github.io/posts/architecture/aas/</guid>
      <description>&amp;ldquo;Aas&amp;rdquo; 是一种缩写，代表了一系列与计算机和信息技术相关的服务模型。以下是一些常见的 &amp;ldquo;as a Service&amp;rdquo;（Aas）模型：</description>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://WFUing.github.io/posts/architecture/aas/featured.jpg" />
    </item>
    
    <item>
      <title>IaC基本概念</title>
      <link>https://WFUing.github.io/posts/architecture/iac/concept/</link>
      <pubDate>Thu, 16 Nov 2023 10:47:45 +0800</pubDate>
      
      <guid>https://WFUing.github.io/posts/architecture/iac/concept/</guid>
      <description>基础架构即代码（IaC）是通过机器可读的定义文件而不是物理硬件配置或交互式配置工具来管理和配置计算机数据中心资源的过程。定义可以在版本控制系统中。定义文件中的代码可以使用脚本或声明式定义，而不是通过人工流程来维护代码，但 IaC 更经常使用声明式方法。</description>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://WFUing.github.io/posts/architecture/iac/concept/featured.jpg" />
    </item>
    
    <item>
      <title>《黑客与画家》读书笔记</title>
      <link>https://WFUing.github.io/read/%E9%BB%91%E5%AE%A2%E4%B8%8E%E7%94%BB%E5%AE%B6/</link>
      <pubDate>Sun, 12 Nov 2023 19:16:22 +0800</pubDate>
      
      <guid>https://WFUing.github.io/read/%E9%BB%91%E5%AE%A2%E4%B8%8E%E7%94%BB%E5%AE%B6/</guid>
      <description>聚焦于计算机科学、创新和创业，探讨了黑客文化、编程艺术、创意思维以及成功企业的共同特质。书中通过一系列独立的随笔和观点，呈现了作者对技术、艺术和创业的独到见解。适合对计算机科学、创新和创业感兴趣的读者。尤其对那些想要了解黑客文化、程序员思维方式，以及创业者在技术领域取得成功的人群。</description>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://WFUing.github.io/read/%E9%BB%91%E5%AE%A2%E4%B8%8E%E7%94%BB%E5%AE%B6/featured.png" />
    </item>
    
    <item>
      <title>Java类加载机制</title>
      <link>https://WFUing.github.io/posts/language/java/class-loader/</link>
      <pubDate>Tue, 07 Nov 2023 23:15:08 +0800</pubDate>
      
      <guid>https://WFUing.github.io/posts/language/java/class-loader/</guid>
      <description>字节码文件需要经过加载，链接（包括验证、准备、解析），初始化才能转为类，然后才能根据类来创建对象</description>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://WFUing.github.io/posts/language/java/class-loader/featured.png" />
    </item>
    
    <item>
      <title>Junit 运行流程</title>
      <link>https://WFUing.github.io/posts/language/java/junit/</link>
      <pubDate>Sun, 05 Nov 2023 18:15:08 +0800</pubDate>
      
      <guid>https://WFUing.github.io/posts/language/java/junit/</guid>
      <description>Junit 是由 Kent Beck 和 Erich Gamma 于 1995 年底着手编写的框架，自此以后，Junit 框架日益普及，现在已经成为单元测试 Java 应用程序的事实上的标准。</description>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://WFUing.github.io/posts/language/java/junit/featured.png" />
    </item>
    
    <item>
      <title>Netty</title>
      <link>https://WFUing.github.io/posts/language/java/java-network/netty/</link>
      <pubDate>Wed, 01 Nov 2023 18:53:17 +0800</pubDate>
      
      <guid>https://WFUing.github.io/posts/language/java/java-network/netty/</guid>
      <description>Netty 是 JBoss 开源项目，是异步的、基于事件驱动的网络应用框架，以高性能、高并发著称。Netty 是基于 Java NIO 构建出来的，主要用于开发基于 TCP 协议的网络 IO 程序。</description>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://WFUing.github.io/posts/language/java/java-network/netty/featured.png" />
    </item>
    
    <item>
      <title>HTTPS RSA 握手解析</title>
      <link>https://WFUing.github.io/posts/language/java/java-network/https-rsa/</link>
      <pubDate>Wed, 01 Nov 2023 09:43:45 +0800</pubDate>
      
      <guid>https://WFUing.github.io/posts/language/java/java-network/https-rsa/</guid>
      <description></description>
      
    </item>
    
    <item>
      <title>HTTP-1 HTTPS HTTP-2 HTTP-3</title>
      <link>https://WFUing.github.io/posts/language/java/java-network/http123-https/</link>
      <pubDate>Tue, 31 Oct 2023 14:43:45 +0800</pubDate>
      
      <guid>https://WFUing.github.io/posts/language/java/java-network/http123-https/</guid>
      <description>HTTP # HTTP 基本概念 # HTTP 是什么？ # HTTP 是超文本传输协议，也就是HyperText Transfer Protocol。</description>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://WFUing.github.io/posts/language/java/java-network/http123-https/featured.webp" />
    </item>
    
    <item>
      <title>langium简介</title>
      <link>https://WFUing.github.io/posts/language/dsl/langium/</link>
      <pubDate>Tue, 31 Oct 2023 10:46:20 +0800</pubDate>
      
      <guid>https://WFUing.github.io/posts/language/dsl/langium/</guid>
      <description>Usage # 1 Langium download # https://www.</description>
      
    </item>
    
    <item>
      <title>vscode-language-server</title>
      <link>https://WFUing.github.io/posts/language/dsl/vscode-language-server/</link>
      <pubDate>Tue, 31 Oct 2023 10:46:20 +0800</pubDate>
      
      <guid>https://WFUing.github.io/posts/language/dsl/vscode-language-server/</guid>
      <description>Resource # Protocol specification https://microsoft.</description>
      
    </item>
    
    <item>
      <title>xtext简介</title>
      <link>https://WFUing.github.io/posts/language/dsl/xtext/</link>
      <pubDate>Tue, 31 Oct 2023 10:46:20 +0800</pubDate>
      
      <guid>https://WFUing.github.io/posts/language/dsl/xtext/</guid>
      <description>Usage # 项目创建 # XText 开发一个新的语言</description>
      
    </item>
    
    <item>
      <title>一次完整的HTTP请求过程</title>
      <link>https://WFUing.github.io/posts/language/java/java-network/http-process/</link>
      <pubDate>Mon, 30 Oct 2023 19:43:45 +0800</pubDate>
      
      <guid>https://WFUing.github.io/posts/language/java/java-network/http-process/</guid>
      <description>Resources # 小林coding 3.</description>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://WFUing.github.io/posts/language/java/java-network/http-process/featured.png" />
    </item>
    
    <item>
      <title>快速入门 Akka Java 指南</title>
      <link>https://WFUing.github.io/posts/architecture/iot/akka-java/</link>
      <pubDate>Mon, 30 Oct 2023 09:16:13 +0800</pubDate>
      
      <guid>https://WFUing.github.io/posts/architecture/iot/akka-java/</guid>
      <description>Akka 是一个用于在 JVM 上构建高并发、分布式和可容错的事件驱动应用程序的运行时工具包。Akka 既可以用于 Java，也可以用于 Scala。本指南通过描述 Java 版本的&lt;code&gt;Hello World&lt;/code&gt;示例来介绍 Akka。</description>
      
    </item>
    
    <item>
      <title>术语与概念</title>
      <link>https://WFUing.github.io/posts/architecture/iot/concept/</link>
      <pubDate>Sat, 28 Oct 2023 22:05:13 +0800</pubDate>
      
      <guid>https://WFUing.github.io/posts/architecture/iot/concept/</guid>
      <description>试图建立一个通用的术语来定义一个坚实的基础以对并发、分布式系统这些 Akka 的目标问题展开交流。请注意，对于这些术语并没有一个统一的定义。我们只是为了寻找一些可行的定义以便在整个文档中进行引用。</description>
      
    </item>
    
    <item>
      <title>响应式宣言(Reactive Manifesto)</title>
      <link>https://WFUing.github.io/posts/architecture/iot/reactive-manifesto/</link>
      <pubDate>Sat, 28 Oct 2023 21:16:13 +0800</pubDate>
      
      <guid>https://WFUing.github.io/posts/architecture/iot/reactive-manifesto/</guid>
      <description>响应式系统具有响应性、复原性、弹性和消息驱动性。</description>
      
    </item>
    
    <item>
      <title>akka框架</title>
      <link>https://WFUing.github.io/posts/architecture/iot/akka/</link>
      <pubDate>Fri, 27 Oct 2023 09:16:13 +0800</pubDate>
      
      <guid>https://WFUing.github.io/posts/architecture/iot/akka/</guid>
      <description>Akka 是一个开源项目，基于 Apache 2 License。AKKA框架是用Scala写的，主要用于高并发与分布式应用，目前已经得到广泛地运用，例如Spark、Spray等框架在底层都使用了AKKA进行并发处理。</description>
      
    </item>
    
    <item>
      <title>Markdown公式语法.md</title>
      <link>https://WFUing.github.io/posts/algorithm/ai/li-hongyis-notes/markdown%E5%85%AC%E5%BC%8F%E8%AF%AD%E6%B3%95/</link>
      <pubDate>Mon, 23 Oct 2023 16:25:26 +0800</pubDate>
      
      <guid>https://WFUing.github.io/posts/algorithm/ai/li-hongyis-notes/markdown%E5%85%AC%E5%BC%8F%E8%AF%AD%E6%B3%95/</guid>
      <description>一、公式使用参考 # 1．如何插入公式 # $ \LaTeX $ 的数学公式有两种：行中公式和独立公式。行中公式放在文中与其它文字混编，独立公式单独成行。</description>
      
    </item>
    
    <item>
      <title>一、机器学习概论.md</title>
      <link>https://WFUing.github.io/posts/algorithm/ai/li-hongyis-notes/%E4%B8%80%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%A6%82%E8%AE%BA/</link>
      <pubDate>Mon, 23 Oct 2023 16:25:26 +0800</pubDate>
      
      <guid>https://WFUing.github.io/posts/algorithm/ai/li-hongyis-notes/%E4%B8%80%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%A6%82%E8%AE%BA/</guid>
      <description>李宏毅机器学习笔记 # [toc]</description>
      
    </item>
    
    <item>
      <title>七、Convolutional Neural Network.md</title>
      <link>https://WFUing.github.io/posts/algorithm/ai/li-hongyis-notes/%E4%B8%83convolutional-neural-network/</link>
      <pubDate>Mon, 23 Oct 2023 16:25:26 +0800</pubDate>
      
      <guid>https://WFUing.github.io/posts/algorithm/ai/li-hongyis-notes/%E4%B8%83convolutional-neural-network/</guid>
      <description>七、Convolutional Neural Network # [toc]</description>
      
    </item>
    
    <item>
      <title>三、梯度下降.md</title>
      <link>https://WFUing.github.io/posts/algorithm/ai/li-hongyis-notes/%E4%B8%89%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D/</link>
      <pubDate>Mon, 23 Oct 2023 16:25:26 +0800</pubDate>
      
      <guid>https://WFUing.github.io/posts/algorithm/ai/li-hongyis-notes/%E4%B8%89%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D/</guid>
      <description>三、梯度下降 # [toc]</description>
      
    </item>
    
    <item>
      <title>二、回归模型.md</title>
      <link>https://WFUing.github.io/posts/algorithm/ai/li-hongyis-notes/%E4%BA%8C%E5%9B%9E%E5%BD%92%E6%A8%A1%E5%9E%8B/</link>
      <pubDate>Mon, 23 Oct 2023 16:25:26 +0800</pubDate>
      
      <guid>https://WFUing.github.io/posts/algorithm/ai/li-hongyis-notes/%E4%BA%8C%E5%9B%9E%E5%BD%92%E6%A8%A1%E5%9E%8B/</guid>
      <description>二、回归模型 # [toc]</description>
      
    </item>
    
    <item>
      <title>五、深度学习.md</title>
      <link>https://WFUing.github.io/posts/algorithm/ai/li-hongyis-notes/%E4%BA%94%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/</link>
      <pubDate>Mon, 23 Oct 2023 16:25:26 +0800</pubDate>
      
      <guid>https://WFUing.github.io/posts/algorithm/ai/li-hongyis-notes/%E4%BA%94%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/</guid>
      <description>五、深度学习 # [toc]</description>
      
    </item>
    
    <item>
      <title>六、Tips for Training DNN.md</title>
      <link>https://WFUing.github.io/posts/algorithm/ai/li-hongyis-notes/%E5%85%ADtips-for-training-dnn/</link>
      <pubDate>Mon, 23 Oct 2023 16:25:26 +0800</pubDate>
      
      <guid>https://WFUing.github.io/posts/algorithm/ai/li-hongyis-notes/%E5%85%ADtips-for-training-dnn/</guid>
      <description>Tips for Training DNN # [toc]</description>
      
    </item>
    
    <item>
      <title>四、分类模型.md</title>
      <link>https://WFUing.github.io/posts/algorithm/ai/li-hongyis-notes/%E5%9B%9B%E5%88%86%E7%B1%BB%E6%A8%A1%E5%9E%8B/</link>
      <pubDate>Mon, 23 Oct 2023 16:25:26 +0800</pubDate>
      
      <guid>https://WFUing.github.io/posts/algorithm/ai/li-hongyis-notes/%E5%9B%9B%E5%88%86%E7%B1%BB%E6%A8%A1%E5%9E%8B/</guid>
      <description>四、分类模型 # [toc]</description>
      
    </item>
    
    <item>
      <title>cluster.md</title>
      <link>https://WFUing.github.io/posts/language/nodejs/stdlib/cluster/</link>
      <pubDate>Mon, 23 Oct 2023 16:19:36 +0800</pubDate>
      
      <guid>https://WFUing.github.io/posts/language/nodejs/stdlib/cluster/</guid>
      <description>cluster 模块 # cluster模块用于组建 Node.</description>
      
    </item>
    
    <item>
      <title>events.md</title>
      <link>https://WFUing.github.io/posts/language/nodejs/stdlib/events/</link>
      <pubDate>Mon, 23 Oct 2023 16:19:36 +0800</pubDate>
      
      <guid>https://WFUing.github.io/posts/language/nodejs/stdlib/events/</guid>
      <description>events 模块 # Node 通过 events 模块提供事件，形成模块之间的通信机制，消除模块与模块的强耦合。</description>
      
    </item>
    
    <item>
      <title>http.md</title>
      <link>https://WFUing.github.io/posts/language/nodejs/stdlib/http/</link>
      <pubDate>Mon, 23 Oct 2023 16:19:36 +0800</pubDate>
      
      <guid>https://WFUing.github.io/posts/language/nodejs/stdlib/http/</guid>
      <description>http 模块 # http模块用于 HTTP 通信。</description>
      
    </item>
    
    <item>
      <title>os.md</title>
      <link>https://WFUing.github.io/posts/language/nodejs/stdlib/os/</link>
      <pubDate>Mon, 23 Oct 2023 16:19:36 +0800</pubDate>
      
      <guid>https://WFUing.github.io/posts/language/nodejs/stdlib/os/</guid>
      <description>os 模块 # cpus属性返回一个数组，每个成员对应一个 CPU 内核。下面代码可以获取本机的 CPU 内核数目。</description>
      
    </item>
    
    <item>
      <title>process.md</title>
      <link>https://WFUing.github.io/posts/language/nodejs/stdlib/process/</link>
      <pubDate>Mon, 23 Oct 2023 16:19:36 +0800</pubDate>
      
      <guid>https://WFUing.github.io/posts/language/nodejs/stdlib/process/</guid>
      <description>process 对象 # process对象是 Node 原生提供的对象，表示当前运行的 Node 进程。它不用引入模块，可以直接使用。</description>
      
    </item>
    
    <item>
      <title>npm-update.md</title>
      <link>https://WFUing.github.io/posts/language/nodejs/npm/npm-update/</link>
      <pubDate>Mon, 23 Oct 2023 16:19:22 +0800</pubDate>
      
      <guid>https://WFUing.github.io/posts/language/nodejs/npm/npm-update/</guid>
      <description>npm update # 更新所有依赖项。</description>
      
    </item>
    
    <item>
      <title>npm-version.md</title>
      <link>https://WFUing.github.io/posts/language/nodejs/npm/npm-version/</link>
      <pubDate>Mon, 23 Oct 2023 16:19:22 +0800</pubDate>
      
      <guid>https://WFUing.github.io/posts/language/nodejs/npm/npm-version/</guid>
      <description>npm version # npm version用来指定模块的版本，然后会将新的版本号写入package.</description>
      
    </item>
    
    <item>
      <title>npm-view.md</title>
      <link>https://WFUing.github.io/posts/language/nodejs/npm/npm-view/</link>
      <pubDate>Mon, 23 Oct 2023 16:19:22 +0800</pubDate>
      
      <guid>https://WFUing.github.io/posts/language/nodejs/npm/npm-view/</guid>
      <description>npm view 命令 # 查看某个模块发布过的所有版本。</description>
      
    </item>
    
    <item>
      <title>npm-whoami.md</title>
      <link>https://WFUing.github.io/posts/language/nodejs/npm/npm-whoami/</link>
      <pubDate>Mon, 23 Oct 2023 16:19:22 +0800</pubDate>
      
      <guid>https://WFUing.github.io/posts/language/nodejs/npm/npm-whoami/</guid>
      <description>npm whoami # npm whoami命令返回当前登录的 npm 用户名。</description>
      
    </item>
    
    <item>
      <title>npx.md</title>
      <link>https://WFUing.github.io/posts/language/nodejs/npm/npx/</link>
      <pubDate>Mon, 23 Oct 2023 16:19:22 +0800</pubDate>
      
      <guid>https://WFUing.github.io/posts/language/nodejs/npm/npx/</guid>
      <description>npx 使用教程 # npm 从5.</description>
      
    </item>
    
    <item>
      <title>package.json.md</title>
      <link>https://WFUing.github.io/posts/language/nodejs/npm/package.json/</link>
      <pubDate>Mon, 23 Oct 2023 16:19:22 +0800</pubDate>
      
      <guid>https://WFUing.github.io/posts/language/nodejs/npm/package.json/</guid>
      <description>package.json # files 字段 # files字段是一个数组，里面指定了一组文件。当模块发布到 NPM 网站时，这组文件会被包括。这个字段是可选的，如果没有指定内容，那么发布时所有文件都会被包括在内。如果files字段包含目录名，该目录里面的所有文件都会被计入。</description>
      
    </item>
    
    <item>
      <title>publish.md</title>
      <link>https://WFUing.github.io/posts/language/nodejs/npm/publish/</link>
      <pubDate>Mon, 23 Oct 2023 16:19:22 +0800</pubDate>
      
      <guid>https://WFUing.github.io/posts/language/nodejs/npm/publish/</guid>
      <description>发布 # 发布标签 # npm 支持为版本打上标签，这叫做发布标签（dist-tag）。如果不指定发布标签，默认就是latest。用户下载模块时，默认安装的就是latest标签指向的版本。</description>
      
    </item>
    
    <item>
      <title>scripts.md</title>
      <link>https://WFUing.github.io/posts/language/nodejs/npm/scripts/</link>
      <pubDate>Mon, 23 Oct 2023 16:19:22 +0800</pubDate>
      
      <guid>https://WFUing.github.io/posts/language/nodejs/npm/scripts/</guid>
      <description>脚本功能 # npm run # npm不仅可以用于模块管理，还可以用于执行脚本。package.</description>
      
    </item>
    
    <item>
      <title>yarn.md</title>
      <link>https://WFUing.github.io/posts/language/nodejs/npm/yarn/</link>
      <pubDate>Mon, 23 Oct 2023 16:19:22 +0800</pubDate>
      
      <guid>https://WFUing.github.io/posts/language/nodejs/npm/yarn/</guid>
      <description>Yarn 的用法 # 简介 # Yarn 是 Facebook 联合其他大公司推出的模块管理器。相比 npm，它有两个显著特点。</description>
      
    </item>
    
    <item>
      <title>basic.md</title>
      <link>https://WFUing.github.io/posts/language/nodejs/npm/basic/</link>
      <pubDate>Mon, 23 Oct 2023 16:19:21 +0800</pubDate>
      
      <guid>https://WFUing.github.io/posts/language/nodejs/npm/basic/</guid>
      <description>概述 # npm有两种含义。</description>
      
    </item>
    
    <item>
      <title>install.md</title>
      <link>https://WFUing.github.io/posts/language/nodejs/npm/install/</link>
      <pubDate>Mon, 23 Oct 2023 16:19:21 +0800</pubDate>
      
      <guid>https://WFUing.github.io/posts/language/nodejs/npm/install/</guid>
      <description>安装 # npm install # 基本用法 # npm install命令用于安装模块。npm i是该命令的别名。</description>
      
    </item>
    
    <item>
      <title>npm-exec.md</title>
      <link>https://WFUing.github.io/posts/language/nodejs/npm/npm-exec/</link>
      <pubDate>Mon, 23 Oct 2023 16:19:21 +0800</pubDate>
      
      <guid>https://WFUing.github.io/posts/language/nodejs/npm/npm-exec/</guid>
      <description>npm exec 命令 # npm exec用来执行某个 npm 模块的内部命令，不管该模块在本地还是在远程。它有一个别名x，即npm exec等同于npm x。</description>
      
    </item>
    
    <item>
      <title>npm-init.md</title>
      <link>https://WFUing.github.io/posts/language/nodejs/npm/npm-init/</link>
      <pubDate>Mon, 23 Oct 2023 16:19:21 +0800</pubDate>
      
      <guid>https://WFUing.github.io/posts/language/nodejs/npm/npm-init/</guid>
      <description>npm init 命令 # npm init命令的作用，是生成package.</description>
      
    </item>
    
    <item>
      <title>npm-link.md</title>
      <link>https://WFUing.github.io/posts/language/nodejs/npm/npm-link/</link>
      <pubDate>Mon, 23 Oct 2023 16:19:21 +0800</pubDate>
      
      <guid>https://WFUing.github.io/posts/language/nodejs/npm/npm-link/</guid>
      <description>npm link 命令 # 有时候，我们在本地修改了一些模块，想先测试这些修改是否有效。那么，怎么才能让依赖于该模块的应用，能够加载这些本地模块呢？</description>
      
    </item>
    
    <item>
      <title>npm-tag.md</title>
      <link>https://WFUing.github.io/posts/language/nodejs/npm/npm-tag/</link>
      <pubDate>Mon, 23 Oct 2023 16:19:21 +0800</pubDate>
      
      <guid>https://WFUing.github.io/posts/language/nodejs/npm/npm-tag/</guid>
      <description>npm tag # npm 允许为版本添加标签，方便用户安装特定版本。只要指定标签，就可以安装该标签下的最新版本。</description>
      
    </item>
    
    <item>
      <title>npm-token.md</title>
      <link>https://WFUing.github.io/posts/language/nodejs/npm/npm-token/</link>
      <pubDate>Mon, 23 Oct 2023 16:19:21 +0800</pubDate>
      
      <guid>https://WFUing.github.io/posts/language/nodejs/npm/npm-token/</guid>
      <description>npm token # npm token命令用来管理认证令牌。</description>
      
    </item>
    
    <item>
      <title>timer</title>
      <link>https://WFUing.github.io/posts/language/nodejs/timer/</link>
      <pubDate>Mon, 23 Oct 2023 16:17:20 +0800</pubDate>
      
      <guid>https://WFUing.github.io/posts/language/nodejs/timer/</guid>
      <description>定时器 # process.</description>
      
    </item>
    
    <item>
      <title>fs</title>
      <link>https://WFUing.github.io/posts/language/nodejs/fs/</link>
      <pubDate>Mon, 23 Oct 2023 16:17:19 +0800</pubDate>
      
      <guid>https://WFUing.github.io/posts/language/nodejs/fs/</guid>
      <description>fs 模块 # fs.</description>
      
    </item>
    
    <item>
      <title>promise</title>
      <link>https://WFUing.github.io/posts/language/nodejs/promise/</link>
      <pubDate>Mon, 23 Oct 2023 16:17:19 +0800</pubDate>
      
      <guid>https://WFUing.github.io/posts/language/nodejs/promise/</guid>
      <description>Promise # UnhandledPromiseRejectionWarning # 如果 Promise 运行过程中抛出错误，或者状态变为rejected，但是没有相应的处理代码，那么 Node 会抛出一个警告UnhandledPromiseRejectionWarning。</description>
      
    </item>
    
    <item>
      <title>repl</title>
      <link>https://WFUing.github.io/posts/language/nodejs/repl/</link>
      <pubDate>Mon, 23 Oct 2023 16:17:19 +0800</pubDate>
      
      <guid>https://WFUing.github.io/posts/language/nodejs/repl/</guid>
      <description>Node 的 REPL 环境 # 简介 # REPL 是 read-eval-print-loop 的缩写，表示命令行下的 Node 引擎的一个互动式对话环境。用户在其中输入命令，就可以立刻看到结果。read 表示读取用户的输入，eval 表示执行，print 表示输出运行的结果，loop 表示重复执行这个过程。</description>
      
    </item>
    
    <item>
      <title>this.md</title>
      <link>https://WFUing.github.io/posts/language/nodejs/module/this/</link>
      <pubDate>Mon, 23 Oct 2023 16:16:08 +0800</pubDate>
      
      <guid>https://WFUing.github.io/posts/language/nodejs/module/this/</guid>
      <description>this 变量 # Node 应用的顶层变量是global，对应浏览器的window变量。</description>
      
    </item>
    
    <item>
      <title>Tencentyun Serverless Api</title>
      <link>https://WFUing.github.io/posts/architecture/serverless/tencentyun-serverless-api/</link>
      <pubDate>Fri, 20 Oct 2023 13:12:03 +0800</pubDate>
      
      <guid>https://WFUing.github.io/posts/architecture/serverless/tencentyun-serverless-api/</guid>
      <description>腾讯云官方推荐并提供了使用控制台和使用Serverless 组件（Tencent Serverless Cloud Framework）两种方式用于管理云函数，分别在浏览器中和本地CLI中进行开发</description>
      
    </item>
    
    <item>
      <title>Alicloud Function Compute API</title>
      <link>https://WFUing.github.io/posts/architecture/serverless/alicloud-fc-api/</link>
      <pubDate>Fri, 20 Oct 2023 12:47:12 +0800</pubDate>
      
      <guid>https://WFUing.github.io/posts/architecture/serverless/alicloud-fc-api/</guid>
      <description>函数计算（Function Compute）是一个事件驱动的全托管 Serverless 计算服务，您无需管理服务器等基础设施，只需编写代码并上传，函数计算会为您准备好计算资源，并以弹性、可靠的方式运行您的代码。</description>
      
    </item>
    
    <item>
      <title>Git Principle</title>
      <link>https://WFUing.github.io/posts/devoops/git/git-principle/</link>
      <pubDate>Thu, 19 Oct 2023 20:58:09 +0800</pubDate>
      
      <guid>https://WFUing.github.io/posts/devoops/git/git-principle/</guid>
      <description>Git 和其它版本控制系统（包括 Subversion 和近似工具）的主要差别在于 Git 对待数据的方式。 从概念上来说，其它大部分系统以文件变更列表的方式存储信息，而 Git 是把数据看作是对小型文件系统的一系列快照。</description>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://WFUing.github.io/posts/devoops/git/git-principle/feature.png" />
    </item>
    
    <item>
      <title>Git Tutorial</title>
      <link>https://WFUing.github.io/posts/devoops/git/git-tutorial/</link>
      <pubDate>Thu, 19 Oct 2023 20:40:43 +0800</pubDate>
      
      <guid>https://WFUing.github.io/posts/devoops/git/git-tutorial/</guid>
      <description>Git 帮助手册 # 国外网友制作了一张 Git Cheat Sheet，总结很精炼，各位不妨收藏一下。</description>
      
    </item>
    
    <item>
      <title>Shell 简介</title>
      <link>https://WFUing.github.io/posts/skills/shell/</link>
      <pubDate>Thu, 19 Oct 2023 11:47:47 +0800</pubDate>
      
      <guid>https://WFUing.github.io/posts/skills/shell/</guid>
      <description>Shell 是一个用 C 语言编写的程序，是用户使用 Linux 的桥梁，它既是一种命令语言，又是一种程序设计语言。</description>
      
    </item>
    
    <item>
      <title>Functional Programming</title>
      <link>https://WFUing.github.io/posts/language/functional-programming/</link>
      <pubDate>Wed, 18 Oct 2023 20:14:26 +0800</pubDate>
      
      <guid>https://WFUing.github.io/posts/language/functional-programming/</guid>
      <description>我们将注意力转向过程抽象，这是一种将复杂程序分解成 functions (也称为 procedures 或 subroutines 。这些术语在不同语境中的用法有细微差别，但就我们的目的而言，我们将把它们视为同义词) 形式的较小代码片段的策略。函数将某些计算封装在一个接口之后，与任何抽象概念一样，函数的用户只需知道函数做了什么，而不需要知道函数是如何完成计算的。函数还通过接收影响其计算的参数来概括计算。计算的结果就是函数的返回值。</description>
      
    </item>
    
    <item>
      <title>《人件》读书笔记</title>
      <link>https://WFUing.github.io/read/%E4%BA%BA%E4%BB%B6/</link>
      <pubDate>Wed, 18 Oct 2023 13:16:22 +0800</pubDate>
      
      <guid>https://WFUing.github.io/read/%E4%BA%BA%E4%BB%B6/</guid>
      <description>软件开发不仅仅是技术问题，更是管理问题。它强调了管理人力资源的关键性，特别是在软件领域，由于脑力劳动的特性，软件开发者与传统的体力劳动者有很大的不同。这本书提供了许多实际的管理方法，以促进团队协作，提高生产效率，同时提供了实例和案例来支持这些观点。该书的主要目标读者是软件组织的管理者，项目经理，团队领导者以及任何对软件开发和团队管理感兴趣的人。它适用于各种软件开发项目，从小型创业公司到大型企业。这本书提供的原则和实践可以适用于各种团队管理场景，不仅限于软件开发。</description>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://WFUing.github.io/read/%E4%BA%BA%E4%BB%B6/featured.png" />
    </item>
    
    <item>
      <title>Serverless Dev</title>
      <link>https://WFUing.github.io/posts/architecture/serverless/serverless-dev/</link>
      <pubDate>Tue, 17 Oct 2023 11:47:45 +0800</pubDate>
      
      <guid>https://WFUing.github.io/posts/architecture/serverless/serverless-dev/</guid>
      <description>Serverless Devs 是一个开源开放的 Serverless 开发者平台，致力于为开发者提供强大的工具链体系。通过该平台，开发者不仅可以一键体验多云 Serverless 产品，极速部署 Serverless 项目，还可以在 Serverless 应用全生命周期进行项目的管理，并且非常简单快速的将 Serverless Devs 与其他工具/平台进行结合，进一步提升研发、运维效能。</description>
      
    </item>
    
    <item>
      <title>Serverless Concept Models</title>
      <link>https://WFUing.github.io/posts/architecture/serverless/serverless-concept-models/</link>
      <pubDate>Tue, 17 Oct 2023 10:47:45 +0800</pubDate>
      
      <guid>https://WFUing.github.io/posts/architecture/serverless/serverless-concept-models/</guid>
      <description>Serverless 是一种计算模型，它使得开发者能够在无需管理服务器和基础架构的情况下运行代码（或称函数）。使用无服务器计算，开发者可以将代码上传到云平台，平台会在需要时根据流量自动进行资源分配和处理。</description>
      
    </item>
    
    <item>
      <title>meta-programming</title>
      <link>https://WFUing.github.io/posts/language/metaprogramming/</link>
      <pubDate>Mon, 16 Oct 2023 15:29:44 +0800</pubDate>
      
      <guid>https://WFUing.github.io/posts/language/metaprogramming/</guid>
      <description>元编程是编写可在其他程序上运行的计算机程序的技术。诸如编译器和程序分析器之类的系统可以被视为元程序，因为它们将其他程序作为输入。我们将在这里讨论的元编程形式特别关注生成要作为程序一部分包含的代码。从某种意义上说，它们可以被认为是初级编译器。</description>
      
    </item>
    
    <item>
      <title>State Machine</title>
      <link>https://WFUing.github.io/posts/architecture/iot/state-machine/</link>
      <pubDate>Mon, 16 Oct 2023 11:16:13 +0800</pubDate>
      
      <guid>https://WFUing.github.io/posts/architecture/iot/state-machine/</guid>
      <description>有限状态机 (finite-state machine, FSM) 是一种抽象机器，在任何给定时间内都可以处于有限个状态中的一个状态。FSM 可以根据某些外部输入从一种状态转换到另一种状态，从一种状态转换到另一种状态称为转换。</description>
      
    </item>
    
    <item>
      <title>Antlr Code Generation</title>
      <link>https://WFUing.github.io/posts/language/code-generation/antlr-code-generation/</link>
      <pubDate>Sun, 15 Oct 2023 09:52:03 +0800</pubDate>
      
      <guid>https://WFUing.github.io/posts/language/code-generation/antlr-code-generation/</guid>
      <description>ANTLR 是 &lt;strong&gt;AN&lt;/strong&gt;other &lt;strong&gt;T&lt;/strong&gt;ool for &lt;strong&gt;L&lt;/strong&gt;anguage &lt;strong&gt;R&lt;/strong&gt;ecognition 的缩写，是一个功能强大的解析器生成器框架，用于从语法文件中构建语言识别器、编译器和翻译器，语法文件中包含从源语言到目标语言的每个语句所要执行的操作。</description>
      
    </item>
    
    <item>
      <title>Programming Language List</title>
      <link>https://WFUing.github.io/posts/language/programming-language-pool/</link>
      <pubDate>Sat, 14 Oct 2023 19:29:44 +0800</pubDate>
      
      <guid>https://WFUing.github.io/posts/language/programming-language-pool/</guid>
      <description>下面列出了所有类型的编程语言的完整分类列表。编程语言没有严格的分类方案。因此，我们可以将一种语言视为不止一种编程语言的示例。</description>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://WFUing.github.io/posts/language/programming-language-pool/featured.png" />
    </item>
    
    <item>
      <title>Zookeeper Code</title>
      <link>https://WFUing.github.io/posts/architecture/distributed/zookeeper/zookeeper-code/</link>
      <pubDate>Sat, 14 Oct 2023 12:00:54 +0800</pubDate>
      
      <guid>https://WFUing.github.io/posts/architecture/distributed/zookeeper/zookeeper-code/</guid>
      <description>Resources # 官方 ZooKeeper 官网 ZooKeeper 官方文档 ZooKeeper Github 博客 ZooKeeper源码阅读心得分享+源码基本结构+源码环境搭建 手摸手教你阅读和调试大型开源项目 ZooKeeper </description>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://WFUing.github.io/posts/architecture/distributed/zookeeper/zookeeper-code/featured.png" />
    </item>
    
    <item>
      <title>Zookeeper 原理</title>
      <link>https://WFUing.github.io/posts/architecture/distributed/zookeeper/zookeeper-theory/</link>
      <pubDate>Fri, 13 Oct 2023 20:07:16 +0800</pubDate>
      
      <guid>https://WFUing.github.io/posts/architecture/distributed/zookeeper/zookeeper-theory/</guid>
      <description>ZooKeeper 是 Apache 的顶级项目。ZooKeeper 为分布式应用提供了高效且可靠的分布式协调服务，提供了诸如统一命名服务、配置管理和分布式锁等分布式的基础服务。在解决分布式数据一致性方面，ZooKeeper 并没有直接采用 Paxos 算法，而是采用了名为 ZAB 的一致性协议。</description>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://WFUing.github.io/posts/architecture/distributed/zookeeper/zookeeper-theory/featured.png" />
    </item>
    
    <item>
      <title>分布式系统概述</title>
      <link>https://WFUing.github.io/posts/architecture/distributed/overview/</link>
      <pubDate>Fri, 13 Oct 2023 19:07:16 +0800</pubDate>
      
      <guid>https://WFUing.github.io/posts/architecture/distributed/overview/</guid>
      <description>什么是分布式系统 # 将硬件或软件组件(服务)分布在不同的网络计算机上，并且通过消息传递进行通信和协调。</description>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://WFUing.github.io/posts/architecture/distributed/overview/featured.png" />
    </item>
    
    <item>
      <title>A Modeling Editor and Code Generator for message-driven architectures with AsyncAPI</title>
      <link>https://WFUing.github.io/posts/language/code-generation/asyncapi-code-generator/</link>
      <pubDate>Fri, 13 Oct 2023 17:27:37 +0800</pubDate>
      
      <guid>https://WFUing.github.io/posts/language/code-generation/asyncapi-code-generator/</guid>
      <description>Background # IIoT（工业物联网）架构通常是分布式和异步的，通信由事件驱动，如消息的发布（和相应的订阅）。这些异步架构提高了可扩展性和对变化的耐受性，但也引发了互操作性问题，因为架构各元素之间对消息内部结构及其分类（主题）的明确知识被稀释了。</description>
      
    </item>
    
    <item>
      <title>Openapi Code Generator</title>
      <link>https://WFUing.github.io/posts/language/code-generation/openapi-code-generator/</link>
      <pubDate>Fri, 13 Oct 2023 16:46:21 +0800</pubDate>
      
      <guid>https://WFUing.github.io/posts/language/code-generation/openapi-code-generator/</guid>
      <description>OpenAPI Generator 可根据 OpenAPI yaml 规范生成代码，并支持多种语言。</description>
      
    </item>
    
    <item>
      <title>Restful API Tutorial</title>
      <link>https://WFUing.github.io/posts/language/java/java-network/restful/</link>
      <pubDate>Fri, 13 Oct 2023 13:19:27 +0800</pubDate>
      
      <guid>https://WFUing.github.io/posts/language/java/java-network/restful/</guid>
      <description>REST 全称是 &lt;strong&gt;Re&lt;/strong&gt;presentational &lt;strong&gt;S&lt;/strong&gt;tate &lt;strong&gt;T&lt;/strong&gt;ransfer（表现层状态转化），更具体的全称是 Resource Representational State Transfer（资源表现层状态转化），具体可以见 Roy Thomas Fielding 的博士论文</description>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://WFUing.github.io/posts/language/java/java-network/restful/featured.png" />
    </item>
    
    <item>
      <title>交叉熵</title>
      <link>https://WFUing.github.io/posts/algorithm/ai/cross-entropy/</link>
      <pubDate>Fri, 13 Oct 2023 09:25:45 +0800</pubDate>
      
      <guid>https://WFUing.github.io/posts/algorithm/ai/cross-entropy/</guid>
      <description>案例驱动 # 通过几个简单的例子来解释和总结什么是交叉熵（Cross Entropy）以及机器学习分类问题中为什么使用交叉熵。</description>
      
    </item>
    
    <item>
      <title>Actor</title>
      <link>https://WFUing.github.io/posts/architecture/iot/actor/</link>
      <pubDate>Fri, 13 Oct 2023 09:16:13 +0800</pubDate>
      
      <guid>https://WFUing.github.io/posts/architecture/iot/actor/</guid>
      <description>Actor Model # CPU 上有多个内核。如果我们想充分利用现有的这些硬件，就需要一种并发运行代码的方法。数十年来无法追踪的错误和开发人员的沮丧都表明，线程并不是解决问题的办法。不过不用担心，我们还有其他很好的选择，今天我要向你展示的就是其中之一：actor model。</description>
      
    </item>
    
    <item>
      <title>AI Code Generators</title>
      <link>https://WFUing.github.io/posts/language/code-generation/ai-code-generators/</link>
      <pubDate>Thu, 12 Oct 2023 20:13:50 +0800</pubDate>
      
      <guid>https://WFUing.github.io/posts/language/code-generation/ai-code-generators/</guid>
      <description>Resources # Demos https://github.</description>
      
    </item>
    
    <item>
      <title>How to Write a Git Commit Message</title>
      <link>https://WFUing.github.io/posts/devoops/git/how-to-write-a-git-commit-message/</link>
      <pubDate>Thu, 12 Oct 2023 19:47:45 +0800</pubDate>
      
      <guid>https://WFUing.github.io/posts/devoops/git/how-to-write-a-git-commit-message/</guid>
      <description>Resources # git tutorial: https://wyag.</description>
      
    </item>
    
    <item>
      <title>45 个常用Linux 命令，让你轻松玩转Linux！</title>
      <link>https://WFUing.github.io/posts/os/linux-instructions/</link>
      <pubDate>Thu, 12 Oct 2023 19:43:45 +0800</pubDate>
      
      <guid>https://WFUing.github.io/posts/os/linux-instructions/</guid>
      <description>Linux 的命令确实非常多，然而熟悉 Linux 的人从来不会因为 Linux 的命令太多而烦恼。因为我们仅仅只需要掌握常用命令，就完全可以驾驭 Linux。</description>
      
    </item>
    
    <item>
      <title>chatGPT 使用指南</title>
      <link>https://WFUing.github.io/posts/algorithm/ai/chatgpt-guide/</link>
      <pubDate>Thu, 12 Oct 2023 19:43:45 +0800</pubDate>
      
      <guid>https://WFUing.github.io/posts/algorithm/ai/chatgpt-guide/</guid>
      <description>Six strategies for getting better results # Write clear instructions # GPT 无法读懂你的心思。如果产出太长，请要求简短回复。如果结果太简单，要求专家级的写作。如果您不喜欢格式，请演示您希望看到的格式。GPT 越少需要猜测你想要什么，你就越有可能得到它。</description>
      
    </item>
    
    <item>
      <title>Frp Nat Traversal</title>
      <link>https://WFUing.github.io/posts/skills/frp-nat-traversal/</link>
      <pubDate>Thu, 12 Oct 2023 19:38:48 +0800</pubDate>
      
      <guid>https://WFUing.github.io/posts/skills/frp-nat-traversal/</guid>
      <description>Resources # github：https://github.</description>
      
    </item>
    
    <item>
      <title>Telosys: a Code Generation Tool by Laurent Guerin</title>
      <link>https://WFUing.github.io/posts/language/code-generation/telosys-code-generation-tool/</link>
      <pubDate>Thu, 12 Oct 2023 19:29:44 +0800</pubDate>
      
      <guid>https://WFUing.github.io/posts/language/code-generation/telosys-code-generation-tool/</guid>
      <description>Resources # url: https://www.</description>
      
    </item>
    
    <item>
      <title>《人月神话》阅读笔记</title>
      <link>https://WFUing.github.io/read/%E4%BA%BA%E6%9C%88%E7%A5%9E%E8%AF%9D/</link>
      <pubDate>Thu, 12 Oct 2023 19:16:22 +0800</pubDate>
      
      <guid>https://WFUing.github.io/read/%E4%BA%BA%E6%9C%88%E7%A5%9E%E8%AF%9D/</guid>
      <description>旨在深入探讨软件工程中的管理和工程问题的经典著作。本书强调了软件开发过程中的复杂性和挑战，尤其是在大规模项目中。书中还探讨了许多经典观点，如&amp;quot;人月神话&amp;quot;、&amp;ldquo;二八定律&amp;quot;和&amp;quot;沟通成本&amp;rdquo;，为软件行业的专业人员提供了宝贵的见解和管理原则，使他们能够更好地理解和应对软件项目的挑战。</description>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://WFUing.github.io/read/%E4%BA%BA%E6%9C%88%E7%A5%9E%E8%AF%9D/featured.png" />
    </item>
    
    <item>
      <title>DevOps 简介</title>
      <link>https://WFUing.github.io/posts/devoops/overview/</link>
      <pubDate>Thu, 12 Oct 2023 17:16:02 +0800</pubDate>
      
      <guid>https://WFUing.github.io/posts/devoops/overview/</guid>
      <description>DevOps 集文化理念、实践和工具于一身，它强调团队授权、跨团队沟通和协作以及技术自动化，其最终目标是优化质量和交付</description>
      
    </item>
    
    <item>
      <title>Leetcode</title>
      <link>https://WFUing.github.io/leetcode/</link>
      <pubDate>Thu, 12 Oct 2023 17:05:17 +0800</pubDate>
      
      <guid>https://WFUing.github.io/leetcode/</guid>
      <description>动态规划 # 【LeetCode 55】跳跃游戏 【LeetCode 72】编辑距离 【LeetCode 115】不同的子序列 【LeetCode 124】二叉树中的最大路径和 【LeetCode 174】地下城游戏 【LeetCode 188】买卖股票的最佳时机IV 【LeetCode 198】打家劫舍 【LeetCode 213】打家劫舍II 【LeetCode 233】数字1的个数 【LeetCode 300】最长递增子序列 【LeetCode 309】最佳买卖股票时机含冷冻期 【LeetCode 312】戳气球 【LeetCode 337】打家劫舍III 【LeetCode 354】俄罗斯套娃信封问题 【LeetCode 376】摆动序列 【LeetCode 390】消除游戏 【LeetCode 689】三个无重叠子数组的最大和 【LeetCode 714】买卖股票的最佳时机含手续费 【LeetCode 907】子数组的最小值之和 【LeetCode 943】最短超级串 【LeetCode 1031】两个非重叠子数组的最大和 【LeetCode 1039】多边形三角剖分的最低得分 【LeetCode 1186】删除一次得到子数组最大和 【LeetCode 系列】买卖股票的最佳时机 【LeetCode 面试题 08.</description>
      
    </item>
    
    <item>
      <title>Code generation for Langium-based DSLs</title>
      <link>https://WFUing.github.io/posts/language/code-generation/code-generation-for-langium-based-dsls/</link>
      <pubDate>Thu, 12 Oct 2023 14:43:44 +0800</pubDate>
      
      <guid>https://WFUing.github.io/posts/language/code-generation/code-generation-for-langium-based-dsls/</guid>
      <description>DSL 和 DSL 工具的一个重要方面是代码生成。DSL 本身在形式化、指定和交流内容方面具有优势，因为它们具有特定领域的性质。但是，如果能从指定的内容中推导出实现代码，就能大大提高工作效率。</description>
      
    </item>
    
    <item>
      <title>Template Engine</title>
      <link>https://WFUing.github.io/posts/language/code-generation/template-engine/</link>
      <pubDate>Thu, 12 Oct 2023 14:43:44 +0800</pubDate>
      
      <guid>https://WFUing.github.io/posts/language/code-generation/template-engine/</guid>
      <description>模板引擎 # 模板引擎（也称为模板处理器或模板解析器）是设计用于将模板与数据模型结合起来以生成结果文档的软件，编写模板所用的语言称为模板语言或模板语言。模板引擎通常作为 Web 模板系统或应用程序框架的一部分，也可以用作预处理器或过滤器。流行的模板引擎包括 Ejs、Jade、Pug、Mustache、HandlebarsJS、Jinja2 和 Blade。</description>
      
    </item>
    
    <item>
      <title>How to Build Github Blog With Hugo</title>
      <link>https://WFUing.github.io/posts/devoops/git/how-to-build-github-blog-with-hugo/</link>
      <pubDate>Thu, 12 Oct 2023 14:39:05 +0800</pubDate>
      
      <guid>https://WFUing.github.io/posts/devoops/git/how-to-build-github-blog-with-hugo/</guid>
      <description>今天花了一点时间搭建了自己的GitHub的博客，当然咯，试验阶段总会发生很多乱七八糟的问题，记录下处理问题过程中几个比较 nice 的 blog</description>
      
    </item>
    
    <item>
      <title>A Guide to Code Generation</title>
      <link>https://WFUing.github.io/posts/language/code-generation/a-guide-to-code-generation/</link>
      <pubDate>Thu, 12 Oct 2023 11:40:20 +0800</pubDate>
      
      <guid>https://WFUing.github.io/posts/language/code-generation/a-guide-to-code-generation/</guid>
      <description>为什么要用代码生成 # productivity：使用代码生成，只需编写一次 generator ，就可以根据需要多次重复使用。向 generator 提供特定输入并调用它比手动编写代码要快得多，因此代码生成可以节省时间。 Simplification：通过代码生成，你可以从一些抽象的描述中生成代码。需要维护的部分变成了 generator 的输入部分，该部分通常是代码的描述，而不是代码本身，与整个生成的代码相比，该描述通常更容易分析和检查。 Portability：一旦你有了为某种语言或框架生成代码的程序，你就可以简单地更改 generator ，并以不同的语言或框架为目标。您还可以同时针对多个平台。 例如，使用解析器生成器，您可以获得 C#、Java 和 C++ 的 parser。 另一个例子：您可能会编写一个 UML 图表，然后使用代码生成器用 C# 创建一个骨架类，并用 SQL 代码为 MySQL 创建一个数据库。因此，相同的抽象描述可用于生成不同类型的工件。 Consistency：有了代码生成，你总能得到你所期望的代码。生成的代码是根据相同的原则设计的，命名规则等也是一致的。当然，除了生成器中的 bug 之外，代码总是能按照你所期望的方式运行，代码质量始终如一。如果用手工编写代码，不同的开发人员可能会使用不同的风格，即使是最重复的代码也会偶尔出现错误。 为什么不要用代码生成 # Maintenance：当您使用代码生成工具时，您的代码就会依赖于它。代码生成工具必须得到维护。如果你创建了它，你就必须不断更新它；如果你只是使用现有的工具，你就必须希望有人继续维护它，或者你必须自己接手。因此，代码生成的优势并不是免费的。如果你没有或找不到合适的能力来维护代码生成器，风险就会更大。 Complexity：自动生成的代码往往比手工编写的代码更复杂。有时，这与将不同部分连接在一起所需的胶水代码有关，或者与生成器支持的用例多于您所需的用例有关。在第二种情况下，生成的代码可以做比你想要的更多的事情，但这并不一定是一种优势。生成代码的优化程度肯定也不如手工编写的代码。有时这种差异很小，并不明显，但如果您的应用程序需要尽可能地提高性能，那么生成的代码对您来说可能并不是最佳选择。 如何使用代码生成?</description>
      
    </item>
    
    <item>
      <title>TODO</title>
      <link>https://WFUing.github.io/todo/</link>
      <pubDate>Sun, 01 Oct 2023 08:00:00 +0800</pubDate>
      
      <guid>https://WFUing.github.io/todo/</guid>
      <description></description>
      
    </item>
    
    <item>
      <title></title>
      <link>https://WFUing.github.io/posts/language/java/zookeeper%E9%9D%A2%E8%AF%95/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WFUing.github.io/posts/language/java/zookeeper%E9%9D%A2%E8%AF%95/</guid>
      <description></description>
      
    </item>
    
  </channel>
</rss>
