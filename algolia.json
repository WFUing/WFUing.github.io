[{"author":null,"categories":null,"content":null,"date":1702351338,"description":"","dir":"post/tech/skills/meta/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":100,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":1702351338,"objectID":"24b1dd131a619823bea5833946c580d4","permalink":"https://WFUing.github.io/post/tech/skills/meta/","publishdate":"2023-12-12T11:22:18+08:00","readingtime":1,"relpermalink":"/post/tech/skills/meta/","section":"post","summary":"Resources How To Use Option As Meta Key In MacOS Terminal? ","tags":[""],"title":"Meta Key","type":"post","url":"/post/tech/skills/meta/","weight":0,"wordcount":11},{"author":null,"categories":null,"content":null,"date":1702351338,"description":"","dir":"post/tech/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":100,"html":null,"keywords":null,"kind":"section","lang":"en","lastmod":1702351338,"objectID":"97f75def7132d3b4efa5eae361ca4ea7","permalink":"https://WFUing.github.io/post/tech/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/post/tech/","section":"post","summary":"时间就像海绵里的水，只要你愿意挤，总还有的。\u0026ndash;鲁迅","tags":null,"title":"Technology","type":"post","url":"/post/tech/","weight":0,"wordcount":0},{"author":null,"categories":null,"content":null,"date":1702351338,"description":"","dir":"post/tech/skills/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":100,"html":null,"keywords":null,"kind":"section","lang":"en","lastmod":1702351338,"objectID":"c161308f635d47f5f30d4c7fc00b8856","permalink":"https://WFUing.github.io/post/tech/skills/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/post/tech/skills/","section":"post","summary":"你的生产力来自于生产力工具，如何提高效率是一个难题。","tags":null,"title":"生产力工具使用小技巧","type":"post","url":"/post/tech/skills/","weight":0,"wordcount":0},{"author":null,"categories":null,"content":null,"date":1702185680,"description":"","dir":"post/tech/language/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":100,"html":null,"keywords":null,"kind":"section","lang":"en","lastmod":1702185680,"objectID":"417698b9a0a51b19887e49b17ebf02ce","permalink":"https://WFUing.github.io/post/tech/language/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/post/tech/language/","section":"post","summary":"Language 指的是一套规则和符号，用于编写和交流计算机程序。编程语言允许开发者创建、控制和优化软件，以便计算机能够理解和执行特定任务。不同的编程语言适用于不同的应用领域和用途，如C++、Python、Java等。","tags":null,"title":"Language","type":"post","url":"/post/tech/language/","weight":0,"wordcount":0},{"author":null,"categories":null,"content":null,"date":1702185680,"description":"","dir":"post/tech/language/lsp/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":100,"html":null,"keywords":null,"kind":"section","lang":"en","lastmod":1702185680,"objectID":"e671783ec037047c14fe570bb8673759","permalink":"https://WFUing.github.io/post/tech/language/lsp/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/post/tech/language/lsp/","section":"post","summary":"Language Server Protocol（LSP）是一种用于提供编程语言相关功能的开放式协议。由微软首创，旨在增强集成开发环境（IDE）的性能。LSP允许不同IDE和编辑器与语言服务器通信，实现代码补全、语法检查等功能，而无需了解特定语言的细节。这提高了跨平台、跨编辑器的互操作性，为开发人员提供了一致的编程体验。 LSP已被广泛采用，支持多种编程语言，为开发者提供更高效、统一的编码环境。","tags":null,"title":"Language Server Protocol","type":"post","url":"/post/tech/language/lsp/","weight":0,"wordcount":0},{"author":null,"categories":null,"content":null,"date":1702185680,"description":"","dir":"post/tech/language/lsp/lsp-principle/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":3900,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":1702185680,"objectID":"e37eecb0a16ce113f8bdc1dd71b0e20f","permalink":"https://WFUing.github.io/post/tech/language/lsp/lsp-principle/","publishdate":"2023-12-10T13:21:20+08:00","readingtime":8,"relpermalink":"/post/tech/language/lsp/lsp-principle/","section":"post","summary":"Language Server Protocol （语言服务器协议，简称 LSP）是微软于 2016 年提出的一套统一的通讯协议方案。该方案定义了一套编辑器或 IDE 与语言服务器之间使用的协议，该语言服务器提供自动完成、转到定义、查找所有引用等语言功能。","tags":["lsp"],"title":"Language Server Protocol 的工作原理","type":"post","url":"/post/tech/language/lsp/lsp-principle/","weight":0,"wordcount":3853},{"author":null,"categories":null,"content":null,"date":1702184061,"description":"","dir":"post/tech/language/lsp/monaco-editor/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":100,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":1702184061,"objectID":"6ef730307eed92d4902ccedb20549738","permalink":"https://WFUing.github.io/post/tech/language/lsp/monaco-editor/","publishdate":"2023-12-10T12:54:21+08:00","readingtime":1,"relpermalink":"/post/tech/language/lsp/monaco-editor/","section":"post","summary":"Resources 官网： https://microsoft.github.io/monaco-editor/ https://github.com/microsoft/monaco-editor 非官方博客 Building a code editor with Monaco","tags":[""],"title":"Monaco Editor","type":"post","url":"/post/tech/language/lsp/monaco-editor/","weight":0,"wordcount":17},{"author":null,"categories":null,"content":null,"date":1702088092,"description":"","dir":"post/tech/algorithm/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":100,"html":null,"keywords":null,"kind":"section","lang":"en","lastmod":1702088092,"objectID":"9b808baa894ccf49a5390ed233f6711b","permalink":"https://WFUing.github.io/post/tech/algorithm/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/post/tech/algorithm/","section":"post","summary":"算法是一组精确的指令或规程，用于解决特定问题或执行特定任务。它们是计算机程序的核心，用于处理和转换数据，执行各种操作，以实现预期的结果。算法可以优化性能、提高效率，并在各种领域如搜索、排序、数据分析和人工智能中发挥关键作用。","tags":null,"title":"Algorithm","type":"post","url":"/post/tech/algorithm/","weight":0,"wordcount":0},{"author":null,"categories":null,"content":null,"date":1702088092,"description":"","dir":"post/tech/algorithm/data-warehouse-mining/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":100,"html":null,"keywords":null,"kind":"section","lang":"en","lastmod":1702088092,"objectID":"75293763e7c68ab970e1ca97ceb60158","permalink":"https://WFUing.github.io/post/tech/algorithm/data-warehouse-mining/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/post/tech/algorithm/data-warehouse-mining/","section":"post","summary":"数据仓库是集成、存储企业数据的系统，旨在支持决策制定。它整合来自不同源头的数据，提供一致、可信的信息。知识发现则是通过技术手段从大量数据中挖掘潜在信息。数据仓库为知识发现提供了丰富的数据源，帮助发现隐藏的模式和关系，为业务智能和预测性分析提供基础。这两者相辅相成，共同助力组织更深入地理解数据，做出更明智的决策。","tags":null,"title":"数据仓库与知识发现","type":"post","url":"/post/tech/algorithm/data-warehouse-mining/","weight":0,"wordcount":0},{"author":null,"categories":null,"content":null,"date":1702088092,"description":"","dir":"post/tech/algorithm/data-warehouse-mining/overview/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":2000,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":1702088092,"objectID":"244b6f9431cdb5fdef686bb47c2f8a9a","permalink":"https://WFUing.github.io/post/tech/algorithm/data-warehouse-mining/overview/","publishdate":"2023-12-09T10:14:52+08:00","readingtime":4,"relpermalink":"/post/tech/algorithm/data-warehouse-mining/overview/","section":"post","summary":"What are data? What is knowledge? We can easily get a lot of data, while these data are meaningless to us. Then what is the thing we really need? Knowledge is something meaningful drawn from data. Knowledge is just what is useful to you. 我们可以轻松地获取大量数据，而这些数据对我们来说毫无","tags":["data"],"title":"数据仓库与知识发现概览","type":"post","url":"/post/tech/algorithm/data-warehouse-mining/overview/","weight":0,"wordcount":1967},{"author":null,"categories":null,"content":null,"date":1701743222,"description":"","dir":"post/tech/architecture/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":100,"html":null,"keywords":null,"kind":"section","lang":"en","lastmod":1701743222,"objectID":"ced5062ff2efd916c6b622e02c279f38","permalink":"https://WFUing.github.io/post/tech/architecture/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/post/tech/architecture/","section":"post","summary":"软件架构是关于如何组织和设计软件系统的原则和模式的领域，它关注应用程序的结构、组件互操作和数据流。它在高层次上决定软件的整体布局，以满足功能需求和性能要求；计算机体系结构则是计算机硬件组件的布局和互连方式的设计，包括中央处理器、内存、输入输出设备等。计算机体系结构决定了计算机如何执行程序和处理数据，对性能、能效性和可扩展性产生影响。","tags":null,"title":"Architecture","type":"post","url":"/post/tech/architecture/","weight":0,"wordcount":0},{"author":null,"categories":null,"content":null,"date":1701743222,"description":"","dir":"post/tech/architecture/distributed/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":100,"html":null,"keywords":null,"kind":"section","lang":"en","lastmod":1701743222,"objectID":"34d6f47d325861c70f707396995a5d02","permalink":"https://WFUing.github.io/post/tech/architecture/distributed/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/post/tech/architecture/distributed/","section":"post","summary":"主要研究分散式系统（Distributed system）如何进行计算。分散式系统是一组电脑，透过网路相互连接传递讯息与通讯后并协调它们的行为而形成的系统。","tags":null,"title":"Distributed Technology","type":"post","url":"/post/tech/architecture/distributed/","weight":0,"wordcount":0},{"author":null,"categories":null,"content":null,"date":1701743222,"description":"","dir":"post/tech/architecture/distributed/k8s/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":100,"html":null,"keywords":null,"kind":"section","lang":"en","lastmod":1701743222,"objectID":"ee5c79920e0ae83dddf0c8aabd6d1616","permalink":"https://WFUing.github.io/post/tech/architecture/distributed/k8s/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/post/tech/architecture/distributed/k8s/","section":"post","summary":"kubernetes 是一个开源的容器编排平台，用于自动化、部署、扩展和运维容器化应用，提供高度可扩展性和强大的管理工具。","tags":null,"title":"kubernetes","type":"post","url":"/post/tech/architecture/distributed/k8s/","weight":0,"wordcount":51},{"author":null,"categories":null,"content":null,"date":1701743222,"description":"","dir":"post/tech/architecture/distributed/k8s/kubevela-mall-swarm/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":2400,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":1701743222,"objectID":"3477a2986eb88571b8626b0b0d544ce5","permalink":"https://WFUing.github.io/post/tech/architecture/distributed/k8s/kubevela-mall-swarm/","publishdate":"2023-12-05T10:27:02+08:00","readingtime":5,"relpermalink":"/post/tech/architecture/distributed/k8s/kubevela-mall-swarm/","section":"post","summary":"本项目用kubevela部署mall-swarm，mall-swarm是一套微服务商城系统，采用了 Spring Cloud 2021 \u0026amp; Alibaba、Spring Boot 2.7、Oauth2、MyBatis、Elasticsearch、Docker、Kubernetes等核心技术。","tags":["kubevela"],"title":"使用 Kubevela 部署 mall-swarm 项目","type":"post","url":"/post/tech/architecture/distributed/k8s/kubevela-mall-swarm/","weight":0,"wordcount":2369},{"author":null,"categories":null,"content":null,"date":1701740765,"description":"","dir":"post/tech/architecture/distributed/ceph/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":3700,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":1701740765,"objectID":"2156bb910b9fb0c442077a839949755f","permalink":"https://WFUing.github.io/post/tech/architecture/distributed/ceph/","publishdate":"2023-12-05T09:46:05+08:00","readingtime":8,"relpermalink":"/post/tech/architecture/distributed/ceph/","section":"post","summary":"Ceph是一种开源分布式存储系统，为大规模数据提供可扩展性和高性能。它使用分布式对象存储、块存储和文件系统，通过智能数据复制和动态数据分布，确保高可用性和容错性。Ceph的设计使其适用于云计算和大数据环境，提供灵活、可靠的存储解决方案，同时支持自动负载平衡和故障恢复。","tags":["ceph"],"title":"Ceph集群部署","type":"post","url":"/post/tech/architecture/distributed/ceph/","weight":0,"wordcount":3631},{"author":null,"categories":null,"content":null,"date":1701072661,"description":"","dir":"post/tech/architecture/distributed/k8s/kubevela/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":800,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":1701072661,"objectID":"955455475de970f37ae71d3b35722a73","permalink":"https://WFUing.github.io/post/tech/architecture/distributed/k8s/kubevela/","publishdate":"2023-11-27T16:11:01+08:00","readingtime":2,"relpermalink":"/post/tech/architecture/distributed/k8s/kubevela/","section":"post","summary":"KubeVela 是一个开箱即用的现代化应用交付与管理平台，它使得应用在面向混合云环境中的交付更简单、快捷。使用 KubeVela 的软件开发团队，可以按需使用云原生能力构建应用，随着团队规模的发展、业务场景的变化扩展其功能，一次构建应用，随处运行。","tags":["kubevela"],"title":"Kubevela","type":"post","url":"/post/tech/architecture/distributed/k8s/kubevela/","weight":0,"wordcount":732},{"author":null,"categories":null,"content":null,"date":1700184080,"description":"","dir":"post/tech/architecture/iac/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":100,"html":null,"keywords":null,"kind":"section","lang":"en","lastmod":1700184080,"objectID":"7d88c2ac0d7dbc4666a246f93caedd99","permalink":"https://WFUing.github.io/post/tech/architecture/iac/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/post/tech/architecture/iac/","section":"post","summary":"基础架构即代码（IaC）是通过机器可读的定义文件而不是物理硬件配置或交互式配置工具来管理和配置计算机数据中心资源的过程。定义可以在版本控制系统中。定义文件中的代码可以使用脚本或声明式定义，而不是通过人工流程来维护代码，但 IaC 更经常使用声明式方法。","tags":null,"title":"Infrastructure as Code","type":"post","url":"/post/tech/architecture/iac/","weight":0,"wordcount":0},{"author":null,"categories":null,"content":null,"date":1700184080,"description":"","dir":"post/tech/architecture/iac/oam/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":16000,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":1700184080,"objectID":"de024354fb69210298a0e5cc11d80d4c","permalink":"https://WFUing.github.io/post/tech/architecture/iac/oam/","publishdate":"2023-11-17T09:21:20+08:00","readingtime":32,"relpermalink":"/post/tech/architecture/iac/oam/","section":"post","summary":"Open Application Model 的目标是定义一种标准的、与基础设施无关的方法，用于描述跨混合环境、云甚至边缘设备的应用部署。该模型要解决的核心问题是如何组成分布式应用程序，然后成功地将其交给负责操作的人员。问题不在于如何编写程序，而在于如何采用面向服务（或面向微服务）架构的组件，并简化围绕此类应用的工作流程。","tags":["oam"],"title":"Open Application Model","type":"post","url":"/post/tech/architecture/iac/oam/","weight":0,"wordcount":15942},{"author":null,"categories":null,"content":null,"date":1700142380,"description":"","dir":"post/tech/language/dsl/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":100,"html":null,"keywords":null,"kind":"section","lang":"en","lastmod":1700142380,"objectID":"d2801aa6efb1f2cea490aef90af32252","permalink":"https://WFUing.github.io/post/tech/language/dsl/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/post/tech/language/dsl/","section":"post","summary":"领域特定语言（DSL）是一种用于特定领域或任务的编程语言，针对特定需求进行优化。DSL具有专门的语法和语义，使其更容易用于解决特定领域的问题，提高了代码的可读性和表达力。DSL广泛应用于领域如数据分析、硬件描述、自然语言处理等，有助于提高开发效率和降低错误风险。","tags":null,"title":"Domain Specific Language","type":"post","url":"/post/tech/language/dsl/","weight":0,"wordcount":0},{"author":null,"categories":null,"content":null,"date":1700142380,"description":"","dir":"post/tech/language/dsl/iot-dsl/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":500,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":1700142380,"objectID":"7ec4b7d1c9c3fc6cd589039dff859621","permalink":"https://WFUing.github.io/post/tech/language/dsl/iot-dsl/","publishdate":"2023-11-16T21:46:20+08:00","readingtime":1,"relpermalink":"/post/tech/language/dsl/iot-dsl/","section":"post","summary":"vorto InformationModel: \u0026#39;vortolang\u0026#39; 1.0 \u0026#39;namespace\u0026#39; qualifiedName \u0026#39;version\u0026#39; version (\u0026#39;displayname\u0026#39; string)? (\u0026#39;description\u0026#39; string)? (\u0026#39;category\u0026#39; ID(\u0026#39;/\u0026#39; ID)*)? (modelReference)* \u0026#39;infomodel\u0026#39; ID \u0026#39;{\u0026#39; \u0026#39;functionblocks\u0026#39; \u0026#39;{\u0026#39; (functionblockProperty)* \u0026#39;}\u0026#39; ; functionblockProperty: (\u0026#39;mandatory\u0026#39; | \u0026#39;optional\u0026#39;)? (\u0026#39;multiple\u0026#39;)? ID \u0026#39;as\u0026#39; [FunctionBlock::ID | qualifiedName] (description)? qualifiedName: ID (\u0026#39;.\u0026#39; ID)*; version : int(\u0026#39;.\u0026#39; int)*(\u0026#39;-\u0026#39;ID)?; ID: \u0026#39;^\u0026#39;?(\u0026#39;a\u0026#39;..\u0026#39;z\u0026#39;|\u0026#39;A\u0026#39;..\u0026#39;Z\u0026#39;|\u0026#39;_\u0026#39;) (\u0026#39;a\u0026#39;..\u0026#39;z\u0026#39;|\u0026#39;A\u0026#39;..\u0026#39;Z\u0026#39;|\u0026#39;_\u0026#39;|\u0026#39;0\u0026#39;..\u0026#39;9\u0026#39;)* ; description: STRING modelReference: \u0026#39;using\u0026#39; qualifiedName \u0026#39;;\u0026#39; version; vortolang 1.0 namespace com.mycompany version 1.0.0 description \u0026#34;Information model for FabLab.eu\u0026#39;s IoT Octopus\u0026#34; category multisensor using","tags":["dsl","iot"],"title":"iot 相关 dsl","type":"post","url":"/post/tech/language/dsl/iot-dsl/","weight":0,"wordcount":404},{"author":null,"categories":null,"content":null,"date":1700124465,"description":"","dir":"post/tech/architecture/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":800,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":1700124465,"objectID":"f7059209c4b05abfa145790cf2ff5ef0","permalink":"https://WFUing.github.io/post/tech/architecture/aas/","publishdate":"2023-11-16T16:47:45+08:00","readingtime":2,"relpermalink":"/post/tech/architecture/aas/","section":"post","summary":"\u0026ldquo;Aas\u0026rdquo; 是一种缩写，代表了一系列与计算机和信息技术相关的服务模型。以下是一些常见的 \u0026ldquo;as a Service\u0026rdquo;（Aas）模型： IaaS（Inf","tags":["IaaS","PaaS","SaaS","DaaS","CaaS","FaaS","MaaS","BaaS"],"title":"as a Service 模型","type":"post","url":"/post/tech/architecture/aas/","weight":0,"wordcount":744},{"author":null,"categories":null,"content":null,"date":1700102865,"description":"","dir":"post/tech/architecture/iac/concept/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":1800,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":1700102865,"objectID":"117b13084c0416771302552033613ee6","permalink":"https://WFUing.github.io/post/tech/architecture/iac/concept/","publishdate":"2023-11-16T10:47:45+08:00","readingtime":4,"relpermalink":"/post/tech/architecture/iac/concept/","section":"post","summary":"基础架构即代码（IaC）是通过机器可读的定义文件而不是物理硬件配置或交互式配置工具来管理和配置计算机数据中心资源的过程。定义可以在版本控制系","tags":["iac"],"title":"IaC基本概念","type":"post","url":"/post/tech/architecture/iac/concept/","weight":0,"wordcount":1703},{"author":null,"categories":null,"content":null,"date":1699370108,"description":"","dir":"post/tech/language/java/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":100,"html":null,"keywords":null,"kind":"section","lang":"en","lastmod":1699370108,"objectID":"9e593f7c0ddf479fd72624e09c072ce0","permalink":"https://WFUing.github.io/post/tech/language/java/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/post/tech/language/java/","section":"post","summary":"Java是一多用途、面向对象、跨平台编程语言，具备强大的生态系统和丰富的库支持。它的特点包括自动内存管理、垃圾回收、跨平台性、多线程支持、安全性和可移植性。Java广泛用于开发Web应用、移动应用、嵌入式系统和大型企业级应用程序。Java的特殊之处在于其独立的虚拟机（JVM），允许在不同平台上运行相同的Java程序，使其成为一种受欢迎的编程语言。","tags":null,"title":"Java","type":"post","url":"/post/tech/language/java/","weight":0,"wordcount":0},{"author":null,"categories":null,"content":null,"date":1699370108,"description":"","dir":"post/tech/language/java/class-loader/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":5600,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":1699370108,"objectID":"ff942ef86aa7129010ff9f7f2b593f5b","permalink":"https://WFUing.github.io/post/tech/language/java/class-loader/","publishdate":"2023-11-07T23:15:08+08:00","readingtime":12,"relpermalink":"/post/tech/language/java/class-loader/","section":"post","summary":"https://cloud.tencent.com/developer/article/1948324 类加载机制简介 类加载整体流程如下图所示，这也是类的生命周期： 字节码文件需要经过加载，链接（包括验证、准备、解析），初始化才能转为类，然后才","tags":["java","interview"],"title":"Java类加载机制","type":"post","url":"/post/tech/language/java/class-loader/","weight":0,"wordcount":5557},{"author":null,"categories":null,"content":null,"date":1699179308,"description":"","dir":"post/tech/language/java/junit/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":3200,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":1699179308,"objectID":"df3f07ffacd4990a05cb656d299c13e3","permalink":"https://WFUing.github.io/post/tech/language/java/junit/","publishdate":"2023-11-05T18:15:08+08:00","readingtime":7,"relpermalink":"/post/tech/language/java/junit/","section":"post","summary":"Junit 是由 Kent Beck 和 Erich Gamma 于 1995 年底着手编写的框架，自此以后，Junit 框架日益普及，现在已经成为单元测试 Java 应用程序的事实上的标准。 在软件开发领域中，从","tags":["junit","interview","java"],"title":"Junit 运行流程","type":"post","url":"/post/tech/language/java/junit/","weight":0,"wordcount":3131},{"author":null,"categories":null,"content":null,"date":1698835997,"description":"","dir":"post/tech/network/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":100,"html":null,"keywords":null,"kind":"section","lang":"en","lastmod":1698835997,"objectID":"54ec6029c1c04385a58fde19d34908c4","permalink":"https://WFUing.github.io/post/tech/network/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/post/tech/network/","section":"post","summary":"计算机网络是一组相互连接的计算机和设备，通过通信协议互相传输数据和资源，实现信息共享、通信和协作，例如互联网是一个全球性的计算机网络。","tags":null,"title":"Computer Network","type":"post","url":"/post/tech/network/","weight":0,"wordcount":0},{"author":null,"categories":null,"content":null,"date":1698835997,"description":"","dir":"post/tech/network/netty/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":18300,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":1698835997,"objectID":"e637d32691d24d664cc079f366f7c72c","permalink":"https://WFUing.github.io/post/tech/network/netty/","publishdate":"2023-11-01T18:53:17+08:00","readingtime":37,"relpermalink":"/post/tech/network/netty/","section":"post","summary":"Netty 是 JBoss 开源项目，是异步的、基于事件驱动的网络应用框架，以高性能、高并发著称。Netty 是基于 Java NIO 构建出来的，主要用于开发基于 TCP 协议的网络 IO 程序。","tags":["netty","interview"],"title":"Netty","type":"post","url":"/post/tech/network/netty/","weight":0,"wordcount":18219},{"author":null,"categories":null,"content":null,"date":1698803025,"description":"","dir":"post/tech/network/https-rsa/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":100,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":1698803025,"objectID":"dbbf84eb40dfabbc9fa05223126d71db","permalink":"https://WFUing.github.io/post/tech/network/https-rsa/","publishdate":"2023-11-01T09:43:45+08:00","readingtime":0,"relpermalink":"/post/tech/network/https-rsa/","section":"post","summary":"","tags":["https","interview"],"title":"HTTPS RSA 握手解析","type":"post","url":"/post/tech/network/https-rsa/","weight":0,"wordcount":0},{"author":null,"categories":null,"content":null,"date":1698734625,"description":"","dir":"post/tech/network/http123-https/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":19400,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":1698734625,"objectID":"1fde82aba66bfe7e61432cc51732e7a9","permalink":"https://WFUing.github.io/post/tech/network/http123-https/","publishdate":"2023-10-31T14:43:45+08:00","readingtime":39,"relpermalink":"/post/tech/network/http123-https/","section":"post","summary":"HTTP HTTP 基本概念 HTTP 是什么？ HTTP 是超文本传输协议，也就是HyperText Transfer Protocol。 能否详细解释「超文本传输协议」？ HTTP 的名字「超文本协议传","tags":["http","https","websocket","interview"],"title":"HTTP-1 HTTPS HTTP-2 HTTP-3","type":"post","url":"/post/tech/network/http123-https/","weight":0,"wordcount":19355},{"author":null,"categories":null,"content":null,"date":1698720380,"description":"","dir":"post/tech/language/dsl/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":800,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":1698720380,"objectID":"5b0f0b65a645dfed20f3b3969b9422f7","permalink":"https://WFUing.github.io/post/tech/language/dsl/langium/","publishdate":"2023-10-31T10:46:20+08:00","readingtime":2,"relpermalink":"/post/tech/language/dsl/langium/","section":"post","summary":"Usage 1 Langium download https://www.npmjs.com/package/langium demo: https://langium.org/docs/getting-started/ note1：第一次按以上流程创建 DSL，HELLO-WORLD 项目在/Users/{用户名}/目录下 note2: VScode 下安装 code 指令。 Shif","tags":["dsl","langium"],"title":"langium简介","type":"post","url":"/post/tech/language/dsl/langium/","weight":0,"wordcount":741},{"author":null,"categories":null,"content":null,"date":1698720380,"description":"","dir":"post/tech/language/dsl/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":100,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":1698720380,"objectID":"29a7b76e58f279423a699ccdacf110c2","permalink":"https://WFUing.github.io/post/tech/language/dsl/vscode-language-server/","publishdate":"2023-10-31T10:46:20+08:00","readingtime":1,"relpermalink":"/post/tech/language/dsl/vscode-language-server/","section":"post","summary":"Resource Protocol specification https://microsoft.github.io/language-server-protocol/ Syntax highlight guide https://code.visualstudio.com/api/language-extensions/syntax-highlight-guide Language Server Tools https://langserver.org/ Language Server Protocol https://microsoft.github.io/language-server-protocol/ VSCode Syntax Highlight Guide https://code.visualstudio.com/api/language-extensions/syntax-highlight-guide Scope Lists https://macromates.com/manual/en/language_grammars https://www.apeth.com/nonblog/stories/textmatebundle.html ","tags":["vscode"],"title":"vscode-language-server","type":"post","url":"/post/tech/language/dsl/vscode-language-server/","weight":0,"wordcount":25},{"author":null,"categories":null,"content":null,"date":1698720380,"description":"","dir":"post/tech/language/dsl/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":1400,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":1698720380,"objectID":"50c2dc6a63412fc05c9f45b5cb336cdc","permalink":"https://WFUing.github.io/post/tech/language/dsl/xtext/","publishdate":"2023-10-31T10:46:20+08:00","readingtime":3,"relpermalink":"/post/tech/language/dsl/xtext/","section":"post","summary":"Usage 项目创建 XText 开发一个新的语言 定义 xtext 文件 dsl.xtext 包括语法定义，语义（Cross-Reference）定义 生成模型代码 XText 根据 dsl.xtext 在 src-gen 目录下，生成 AST 节点模","tags":["dsl","xtext"],"title":"xtext简介","type":"post","url":"/post/tech/language/dsl/xtext/","weight":0,"wordcount":1366},{"author":null,"categories":null,"content":null,"date":1698666225,"description":"","dir":"post/tech/network/http-process/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":3300,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":1698666225,"objectID":"bc7e7b0bc9496c1cf12d76e7d4c06779","permalink":"https://WFUing.github.io/post/tech/network/http-process/","publishdate":"2023-10-30T19:43:45+08:00","readingtime":7,"relpermalink":"/post/tech/network/http-process/","section":"post","summary":"Resources 小林coding 3.1 HTTP 常见面试题 一次完整的HTTP请求过程 当我们在web浏览器的地址栏中输入：www.baidu.com，具体发生了什么？ 对","tags":["http","interview"],"title":"一次完整的HTTP请求过程","type":"post","url":"/post/tech/network/http-process/","weight":0,"wordcount":3219},{"author":null,"categories":null,"content":null,"date":1698628573,"description":"","dir":"post/tech/architecture/iot/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":100,"html":null,"keywords":null,"kind":"section","lang":"en","lastmod":1698628573,"objectID":"2b2bf2f5256cc14fe837981439f3ef0d","permalink":"https://WFUing.github.io/post/tech/architecture/iot/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/post/tech/architecture/iot/","section":"post","summary":"物联网是一个由相互关联的设备组成的网络，这些设备与其他物联网设备和云连接并交换数据。物联网设备通常嵌入了传感器和软件等技术，包括 mechanical and digital machines 以及 consumer objects。","tags":null,"title":"Internet of Things","type":"post","url":"/post/tech/architecture/iot/","weight":0,"wordcount":0},{"author":null,"categories":null,"content":null,"date":1698628573,"description":"","dir":"post/tech/architecture/iot/akka-java/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":6700,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":1698628573,"objectID":"7058c6ae7ed269f30981cf1bdc30aec1","permalink":"https://WFUing.github.io/post/tech/architecture/iot/akka-java/","publishdate":"2023-10-30T09:16:13+08:00","readingtime":14,"relpermalink":"/post/tech/architecture/iot/akka-java/","section":"post","summary":"Akka 是一个用于在 JVM 上构建高并发、分布式和可容错的事件驱动应用程序的运行时工具包。Akka 既可以用于 Java，也可以用于 Scala。本指南通过描述 Java 版本的\u003ccode\u003eHello World\u003c/code\u003e示例来介绍 Akka。","tags":["akka"],"title":"快速入门 Akka Java 指南","type":"post","url":"/post/tech/architecture/iot/akka-java/","weight":0,"wordcount":6670},{"author":null,"categories":null,"content":null,"date":1698501913,"description":"","dir":"post/tech/architecture/iot/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":1900,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":1698501913,"objectID":"0eb039057c766ebf6b82ede9a8e32f2b","permalink":"https://WFUing.github.io/post/tech/architecture/iot/concept/","publishdate":"2023-10-28T22:05:13+08:00","readingtime":4,"relpermalink":"/post/tech/architecture/iot/concept/","section":"post","summary":"试图建立一个通用的术语来定义一个坚实的基础以对并发、分布式系统这些 Akka 的目标问题展开交流。请注意，对于这些术语并没有一个统一的定义。我们只是为了寻找一些可行的定义以便在整个文档中进行引用。","tags":[""],"title":"术语与概念","type":"post","url":"/post/tech/architecture/iot/concept/","weight":0,"wordcount":1853},{"author":null,"categories":null,"content":null,"date":1698498973,"description":"","dir":"post/tech/architecture/iot/reactive-manifesto/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":1300,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":1698498973,"objectID":"a9f5502ca61442cfffef72de386a0462","permalink":"https://WFUing.github.io/post/tech/architecture/iot/reactive-manifesto/","publishdate":"2023-10-28T21:16:13+08:00","readingtime":3,"relpermalink":"/post/tech/architecture/iot/reactive-manifesto/","section":"post","summary":"响应式系统具有响应性、复原性、弹性和消息驱动性。","tags":null,"title":"响应式宣言(Reactive Manifesto)","type":"post","url":"/post/tech/architecture/iot/reactive-manifesto/","weight":0,"wordcount":1265},{"author":null,"categories":null,"content":null,"date":1698369373,"description":"","dir":"post/tech/architecture/iot/akka/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":3800,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":1698369373,"objectID":"dc8739ae61f3d96788dc35733d37f718","permalink":"https://WFUing.github.io/post/tech/architecture/iot/akka/","publishdate":"2023-10-27T09:16:13+08:00","readingtime":8,"relpermalink":"/post/tech/architecture/iot/akka/","section":"post","summary":"Akka 是一个开源项目，基于 Apache 2 License。AKKA框架是用Scala写的，主要用于高并发与分布式应用，目前已经得到广泛地运用，例如Spark、Spray等框架在底层都使用了AKKA进行并发处理。","tags":["akka"],"title":"akka框架","type":"post","url":"/post/tech/architecture/iot/akka/","weight":0,"wordcount":3715},{"author":null,"categories":null,"content":null,"date":1698049526,"description":"","dir":"post/tech/algorithm/ai/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":100,"html":null,"keywords":null,"kind":"section","lang":"en","lastmod":1698049526,"objectID":"34f5bfb70fc44946c3037d61527265d9","permalink":"https://WFUing.github.io/post/tech/algorithm/ai/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/post/tech/algorithm/ai/","section":"post","summary":"人工智能（缩写为AI）亦称机器智能，指由人制造出来的机器所表现出来的智能。通常人工智能是指通过普通计算机程序来呈现人类智能的技术。","tags":null,"title":"Artificial Intelligence","type":"post","url":"/post/tech/algorithm/ai/","weight":0,"wordcount":65},{"author":null,"categories":null,"content":null,"date":1698049526,"description":"","dir":"post/tech/algorithm/ai/li-hongyis-notes/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":10100,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":1698049526,"objectID":"bf18f34ffe4703cf24e01340f7633fe5","permalink":"https://WFUing.github.io/post/tech/algorithm/ai/li-hongyis-notes/markdown%E5%85%AC%E5%BC%8F%E8%AF%AD%E6%B3%95/","publishdate":"2023-10-23T16:25:26+08:00","readingtime":21,"relpermalink":"/post/tech/algorithm/ai/li-hongyis-notes/markdown%E5%85%AC%E5%BC%8F%E8%AF%AD%E6%B3%95/","section":"post","summary":"一、公式使用参考 1．如何插入公式 $ \\LaTeX $ 的数学公式有两种：行中公式和独立公式。行中公式放在文中与其它文字混编，独立公式单独成行。 行中公式可以用","tags":null,"title":"Markdown公式语法.md","type":"post","url":"/post/tech/algorithm/ai/li-hongyis-notes/markdown%E5%85%AC%E5%BC%8F%E8%AF%AD%E6%B3%95/","weight":0,"wordcount":10071},{"author":null,"categories":null,"content":null,"date":1698049526,"description":"","dir":"post/tech/algorithm/ai/li-hongyis-notes/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":1700,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":1698049526,"objectID":"240a043cd99aaad6d8fd4c06dbd02d09","permalink":"https://WFUing.github.io/post/tech/algorithm/ai/li-hongyis-notes/%E4%B8%80%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%A6%82%E8%AE%BA/","publishdate":"2023-10-23T16:25:26+08:00","readingtime":4,"relpermalink":"/post/tech/algorithm/ai/li-hongyis-notes/%E4%B8%80%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%A6%82%E8%AE%BA/","section":"post","summary":"李宏毅机器学习笔记 [toc] 一、机器学习概论 机器学习是什么 机器学习就是让机器能自动找到一个函数function 语音识别（Speech Recognit","tags":null,"title":"一、机器学习概论.md","type":"post","url":"/post/tech/algorithm/ai/li-hongyis-notes/%E4%B8%80%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%A6%82%E8%AE%BA/","weight":0,"wordcount":1606},{"author":null,"categories":null,"content":null,"date":1698049526,"description":"","dir":"post/tech/algorithm/ai/li-hongyis-notes/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":1500,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":1698049526,"objectID":"7d679f1fcc8927344840b864c05065de","permalink":"https://WFUing.github.io/post/tech/algorithm/ai/li-hongyis-notes/%E4%B8%83convolutional-neural-network/","publishdate":"2023-10-23T16:25:26+08:00","readingtime":3,"relpermalink":"/post/tech/algorithm/ai/li-hongyis-notes/%E4%B8%83convolutional-neural-network/","section":"post","summary":"七、Convolutional Neural Network [toc] 7.1 CNN入门详解 卷积神经网络（CNN）常常被用来做图像处理，当然也可以用一般的神经网络，那它们各自有什么","tags":null,"title":"七、Convolutional Neural Network.md","type":"post","url":"/post/tech/algorithm/ai/li-hongyis-notes/%E4%B8%83convolutional-neural-network/","weight":0,"wordcount":1409},{"author":null,"categories":null,"content":null,"date":1698049526,"description":"","dir":"post/tech/algorithm/ai/li-hongyis-notes/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":1800,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":1698049526,"objectID":"16a204160d447a42bce732f3b965c922","permalink":"https://WFUing.github.io/post/tech/algorithm/ai/li-hongyis-notes/%E4%B8%89%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D/","publishdate":"2023-10-23T16:25:26+08:00","readingtime":4,"relpermalink":"/post/tech/algorithm/ai/li-hongyis-notes/%E4%B8%89%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D/","section":"post","summary":"三、梯度下降 [toc] 梯度下降伪代码 梯度下降可以优化损失函数的值，使其尽量小，即可找到最好（在数据集上拟合效果最好）的模型参数。现在假设模型 $f$ 中只有","tags":null,"title":"三、梯度下降.md","type":"post","url":"/post/tech/algorithm/ai/li-hongyis-notes/%E4%B8%89%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D/","weight":0,"wordcount":1753},{"author":null,"categories":null,"content":null,"date":1698049526,"description":"","dir":"post/tech/algorithm/ai/li-hongyis-notes/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":3200,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":1698049526,"objectID":"ae1ea74c5ffdc355ecb5c1d4d8c53fef","permalink":"https://WFUing.github.io/post/tech/algorithm/ai/li-hongyis-notes/%E4%BA%8C%E5%9B%9E%E5%BD%92%E6%A8%A1%E5%9E%8B/","publishdate":"2023-10-23T16:25:26+08:00","readingtime":7,"relpermalink":"/post/tech/algorithm/ai/li-hongyis-notes/%E4%BA%8C%E5%9B%9E%E5%BD%92%E6%A8%A1%E5%9E%8B/","section":"post","summary":"二、回归模型 [toc] 2.1 线性回归模型 回归模型应用案例 股票市场预测（Stock Market Forecast）：预测某个公司明天的股票情况 自动驾驶车（Self-D","tags":null,"title":"二、回归模型.md","type":"post","url":"/post/tech/algorithm/ai/li-hongyis-notes/%E4%BA%8C%E5%9B%9E%E5%BD%92%E6%A8%A1%E5%9E%8B/","weight":0,"wordcount":3105},{"author":null,"categories":null,"content":null,"date":1698049526,"description":"","dir":"post/tech/algorithm/ai/li-hongyis-notes/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":3200,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":1698049526,"objectID":"4c99832571df7e98249c1f5250d85bf3","permalink":"https://WFUing.github.io/post/tech/algorithm/ai/li-hongyis-notes/%E4%BA%94%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/","publishdate":"2023-10-23T16:25:26+08:00","readingtime":7,"relpermalink":"/post/tech/algorithm/ai/li-hongyis-notes/%E4%BA%94%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/","section":"post","summary":"五、深度学习 [toc] 5.1引言 深度学习的历史 1958年：心理学家Rosenblatt提出感知机（Perceptron） 它是一个线性模型。 1969年","tags":null,"title":"五、深度学习.md","type":"post","url":"/post/tech/algorithm/ai/li-hongyis-notes/%E4%BA%94%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/","weight":0,"wordcount":3173},{"author":null,"categories":null,"content":null,"date":1698049526,"description":"","dir":"post/tech/algorithm/ai/li-hongyis-notes/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":5000,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":1698049526,"objectID":"3178268d441b70edb86c9256c4e03f06","permalink":"https://WFUing.github.io/post/tech/algorithm/ai/li-hongyis-notes/%E5%85%ADtips-for-training-dnn/","publishdate":"2023-10-23T16:25:26+08:00","readingtime":10,"relpermalink":"/post/tech/algorithm/ai/li-hongyis-notes/%E5%85%ADtips-for-training-dnn/","section":"post","summary":"Tips for Training DNN [toc] 6.1 神经网络训练问题与解决方案 明确问题类型及其对应方法 在深度学习中，一般有两种问题： 在训练集上性能不好 在测试集上性能不好。 当一个方法","tags":null,"title":"六、Tips for Training DNN.md","type":"post","url":"/post/tech/algorithm/ai/li-hongyis-notes/%E5%85%ADtips-for-training-dnn/","weight":0,"wordcount":4968},{"author":null,"categories":null,"content":null,"date":1698049526,"description":"","dir":"post/tech/algorithm/ai/li-hongyis-notes/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":6000,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":1698049526,"objectID":"93f1c79d78de8a6423016f8981c1732f","permalink":"https://WFUing.github.io/post/tech/algorithm/ai/li-hongyis-notes/%E5%9B%9B%E5%88%86%E7%B1%BB%E6%A8%A1%E5%9E%8B/","publishdate":"2023-10-23T16:25:26+08:00","readingtime":12,"relpermalink":"/post/tech/algorithm/ai/li-hongyis-notes/%E5%9B%9B%E5%88%86%E7%B1%BB%E6%A8%A1%E5%9E%8B/","section":"post","summary":"四、分类模型 [toc] 4.1 分类简介及其与回归的区别 分类模型应用案例（Classification Cases） 信用评分（Credit Scoring） 输入","tags":null,"title":"四、分类模型.md","type":"post","url":"/post/tech/algorithm/ai/li-hongyis-notes/%E5%9B%9B%E5%88%86%E7%B1%BB%E6%A8%A1%E5%9E%8B/","weight":0,"wordcount":5937},{"author":null,"categories":null,"content":null,"date":1698049176,"description":"","dir":"post/tech/language/nodejs/stdlib/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":400,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":1698049176,"objectID":"cf0ece666ff7340322012357b87b5beb","permalink":"https://WFUing.github.io/post/tech/language/nodejs/stdlib/cluster/","publishdate":"2023-10-23T16:19:36+08:00","readingtime":1,"relpermalink":"/post/tech/language/nodejs/stdlib/cluster/","section":"post","summary":"cluster 模块 cluster模块用于组建 Node.js 应用的集群。 cluster.isMaster属性表示当前进程是否为主进程。 const cluster = require(\u0026#39;cluster\u0026#39;); const isMaster = cluster.isMaster; cluster.","tags":null,"title":"cluster.md","type":"post","url":"/post/tech/language/nodejs/stdlib/cluster/","weight":0,"wordcount":349},{"author":null,"categories":null,"content":null,"date":1698049176,"description":"","dir":"post/tech/language/nodejs/stdlib/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":2100,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":1698049176,"objectID":"45811e446c034a937cbef7e692545905","permalink":"https://WFUing.github.io/post/tech/language/nodejs/stdlib/events/","publishdate":"2023-10-23T16:19:36+08:00","readingtime":5,"relpermalink":"/post/tech/language/nodejs/stdlib/events/","section":"post","summary":"events 模块 Node 通过 events 模块提供事件，形成模块之间的通信机制，消除模块与模块的强耦合。 概述 events模块提供一个构造函数，可以用来生成事件发生器的实","tags":null,"title":"events.md","type":"post","url":"/post/tech/language/nodejs/stdlib/events/","weight":0,"wordcount":2050},{"author":null,"categories":null,"content":null,"date":1698049176,"description":"","dir":"post/tech/language/nodejs/stdlib/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":1400,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":1698049176,"objectID":"ab92d562142ff0402f857858e86e6e04","permalink":"https://WFUing.github.io/post/tech/language/nodejs/stdlib/http/","publishdate":"2023-10-23T16:19:36+08:00","readingtime":3,"relpermalink":"/post/tech/language/nodejs/stdlib/http/","section":"post","summary":"http 模块 http模块用于 HTTP 通信。 http.Server http.Server属性指向一个类，表示 Web 服务器实例。 这个类继承了net.Server，而net.Serv","tags":null,"title":"http.md","type":"post","url":"/post/tech/language/nodejs/stdlib/http/","weight":0,"wordcount":1348},{"author":null,"categories":null,"content":null,"date":1698049176,"description":"","dir":"post/tech/language/nodejs/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":100,"html":null,"keywords":null,"kind":"section","lang":"en","lastmod":1698049176,"objectID":"28926e7f877b3f0f8d8d8f4588df3b37","permalink":"https://WFUing.github.io/post/tech/language/nodejs/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/post/tech/language/nodejs/","section":"post","summary":"","tags":null,"title":"nodejs","type":"post","url":"/post/tech/language/nodejs/","weight":0,"wordcount":0},{"author":null,"categories":null,"content":null,"date":1698049176,"description":"","dir":"post/tech/language/nodejs/stdlib/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":100,"html":null,"keywords":null,"kind":"section","lang":"en","lastmod":1698049176,"objectID":"e98ab3d98576b702beae5bc28ef58e9f","permalink":"https://WFUing.github.io/post/tech/language/nodejs/stdlib/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/post/tech/language/nodejs/stdlib/","section":"post","summary":"","tags":null,"title":"nodejs/stdlib","type":"post","url":"/post/tech/language/nodejs/stdlib/","weight":0,"wordcount":0},{"author":null,"categories":null,"content":null,"date":1698049176,"description":"","dir":"post/tech/language/nodejs/stdlib/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":100,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":1698049176,"objectID":"99d87828d4e6769eeaa654caa44fd734","permalink":"https://WFUing.github.io/post/tech/language/nodejs/stdlib/os/","publishdate":"2023-10-23T16:19:36+08:00","readingtime":1,"relpermalink":"/post/tech/language/nodejs/stdlib/os/","section":"post","summary":"os 模块 cpus属性返回一个数组，每个成员对应一个 CPU 内核。下面代码可以获取本机的 CPU 内核数目。 const { cpus } = require(\u0026#39;os\u0026#39;); const numWorkers = cpus().length;","tags":null,"title":"os.md","type":"post","url":"/post/tech/language/nodejs/stdlib/os/","weight":0,"wordcount":55},{"author":null,"categories":null,"content":null,"date":1698049176,"description":"","dir":"post/tech/language/nodejs/stdlib/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":400,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":1698049176,"objectID":"c0410fc70e0e48d4fd48a83ff4a7e086","permalink":"https://WFUing.github.io/post/tech/language/nodejs/stdlib/process/","publishdate":"2023-10-23T16:19:36+08:00","readingtime":1,"relpermalink":"/post/tech/language/nodejs/stdlib/process/","section":"post","summary":"process 对象 process对象是 Node 原生提供的对象，表示当前运行的 Node 进程。它不用引入模块，可以直接使用。 process.argv process.argv是一个数组，表示启","tags":null,"title":"process.md","type":"post","url":"/post/tech/language/nodejs/stdlib/process/","weight":0,"wordcount":344},{"author":null,"categories":null,"content":null,"date":1698049162,"description":"","dir":"post/tech/language/nodejs/npm/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":100,"html":null,"keywords":null,"kind":"section","lang":"en","lastmod":1698049162,"objectID":"fc9728ba9488ca1c140ad6c952796601","permalink":"https://WFUing.github.io/post/tech/language/nodejs/npm/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/post/tech/language/nodejs/npm/","section":"post","summary":"","tags":null,"title":"nodejs/npm","type":"post","url":"/post/tech/language/nodejs/npm/","weight":0,"wordcount":0},{"author":null,"categories":null,"content":null,"date":1698049162,"description":"","dir":"post/tech/language/nodejs/npm/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":100,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":1698049162,"objectID":"220a19102fbe422d7e8caf322eb0b1a0","permalink":"https://WFUing.github.io/post/tech/language/nodejs/npm/npm-update/","publishdate":"2023-10-23T16:19:22+08:00","readingtime":1,"relpermalink":"/post/tech/language/nodejs/npm/npm-update/","section":"post","summary":"npm update 更新所有依赖项。 $ npm update 更新单个依赖。 $ npm update xml2js 同时更新 package.json 里面每个依赖的版本号。 $ npm update --save","tags":null,"title":"npm-update.md","type":"post","url":"/post/tech/language/nodejs/npm/npm-update/","weight":0,"wordcount":44},{"author":null,"categories":null,"content":null,"date":1698049162,"description":"","dir":"post/tech/language/nodejs/npm/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":1200,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":1698049162,"objectID":"7a67bbb4b993cf5b6523f90c3edd56ae","permalink":"https://WFUing.github.io/post/tech/language/nodejs/npm/npm-version/","publishdate":"2023-10-23T16:19:22+08:00","readingtime":3,"relpermalink":"/post/tech/language/nodejs/npm/npm-version/","section":"post","summary":"npm version npm version用来指定模块的版本，然后会将新的版本号写入package.json和package-lock.json。 它的命令行用法如","tags":null,"title":"npm-version.md","type":"post","url":"/post/tech/language/nodejs/npm/npm-version/","weight":0,"wordcount":1144},{"author":null,"categories":null,"content":null,"date":1698049162,"description":"","dir":"post/tech/language/nodejs/npm/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":100,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":1698049162,"objectID":"860c4dba2032d9449f368520e249c9ec","permalink":"https://WFUing.github.io/post/tech/language/nodejs/npm/npm-view/","publishdate":"2023-10-23T16:19:22+08:00","readingtime":1,"relpermalink":"/post/tech/language/nodejs/npm/npm-view/","section":"post","summary":"npm view 命令 查看某个模块发布过的所有版本。 $ npm view [PackageName] versions","tags":null,"title":"npm-view.md","type":"post","url":"/post/tech/language/nodejs/npm/npm-view/","weight":0,"wordcount":24},{"author":null,"categories":null,"content":null,"date":1698049162,"description":"","dir":"post/tech/language/nodejs/npm/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":100,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":1698049162,"objectID":"86d5e59669fc80f75445c76b46cf836d","permalink":"https://WFUing.github.io/post/tech/language/nodejs/npm/npm-whoami/","publishdate":"2023-10-23T16:19:22+08:00","readingtime":1,"relpermalink":"/post/tech/language/nodejs/npm/npm-whoami/","section":"post","summary":"npm whoami npm whoami命令返回当前登录的 npm 用户名。 $ npm whoami","tags":null,"title":"npm-whoami.md","type":"post","url":"/post/tech/language/nodejs/npm/npm-whoami/","weight":0,"wordcount":26},{"author":null,"categories":null,"content":null,"date":1698049162,"description":"","dir":"post/tech/language/nodejs/npm/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":1600,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":1698049162,"objectID":"e7e88ed5d20637c8b3d75d1c94405440","permalink":"https://WFUing.github.io/post/tech/language/nodejs/npm/npx/","publishdate":"2023-10-23T16:19:22+08:00","readingtime":4,"relpermalink":"/post/tech/language/nodejs/npm/npx/","section":"post","summary":"npx 使用教程 npm 从5.2版开始，增加了 npx 命令，它有很多用处。 Node 自带 npm 模块，所以可以直接使用 npx 命令。万一不能用，就要手动安装一下。 $ npm install -g npx 调用项","tags":null,"title":"npx.md","type":"post","url":"/post/tech/language/nodejs/npm/npx/","weight":0,"wordcount":1520},{"author":null,"categories":null,"content":null,"date":1698049162,"description":"","dir":"post/tech/language/nodejs/npm/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":600,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":1698049162,"objectID":"546267878eb8e373879fe477a0183725","permalink":"https://WFUing.github.io/post/tech/language/nodejs/npm/package.json/","publishdate":"2023-10-23T16:19:22+08:00","readingtime":2,"relpermalink":"/post/tech/language/nodejs/npm/package.json/","section":"post","summary":"package.json files 字段 files字段是一个数组，里面指定了一组文件。当模块发布到 NPM 网站时，这组文件会被包括。这个字段是可选的，如果没有指定内容，那么发布时","tags":null,"title":"package.json.md","type":"post","url":"/post/tech/language/nodejs/npm/package.json/","weight":0,"wordcount":561},{"author":null,"categories":null,"content":null,"date":1698049162,"description":"","dir":"post/tech/language/nodejs/npm/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":1400,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":1698049162,"objectID":"d44e709fa968e6509ea1035dd0ed1b2b","permalink":"https://WFUing.github.io/post/tech/language/nodejs/npm/publish/","publishdate":"2023-10-23T16:19:22+08:00","readingtime":3,"relpermalink":"/post/tech/language/nodejs/npm/publish/","section":"post","summary":"发布 发布标签 npm 支持为版本打上标签，这叫做发布标签（dist-tag）。如果不指定发布标签，默认就是latest。用户下载模块时，默认安装的就","tags":null,"title":"publish.md","type":"post","url":"/post/tech/language/nodejs/npm/publish/","weight":0,"wordcount":1319},{"author":null,"categories":null,"content":null,"date":1698049162,"description":"","dir":"post/tech/language/nodejs/npm/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":4500,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":1698049162,"objectID":"6e623ed2e1b995a4ef7fe61e5cb7f21c","permalink":"https://WFUing.github.io/post/tech/language/nodejs/npm/scripts/","publishdate":"2023-10-23T16:19:22+08:00","readingtime":9,"relpermalink":"/post/tech/language/nodejs/npm/scripts/","section":"post","summary":"脚本功能 npm run npm不仅可以用于模块管理，还可以用于执行脚本。package.json文件有一个scripts字段，可以用于指定脚本命令，供n","tags":null,"title":"scripts.md","type":"post","url":"/post/tech/language/nodejs/npm/scripts/","weight":0,"wordcount":4467},{"author":null,"categories":null,"content":null,"date":1698049162,"description":"","dir":"post/tech/language/nodejs/npm/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":1600,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":1698049162,"objectID":"aa2ea28abd82fa0b2871d3d8679495c3","permalink":"https://WFUing.github.io/post/tech/language/nodejs/npm/yarn/","publishdate":"2023-10-23T16:19:22+08:00","readingtime":4,"relpermalink":"/post/tech/language/nodejs/npm/yarn/","section":"post","summary":"Yarn 的用法 简介 Yarn 是 Facebook 联合其他大公司推出的模块管理器。相比 npm，它有两个显著特点。 （1）安装速度较快。 Yarn 采用平行安装模式，而 npm 采用的是线性模式","tags":null,"title":"yarn.md","type":"post","url":"/post/tech/language/nodejs/npm/yarn/","weight":0,"wordcount":1551},{"author":null,"categories":null,"content":null,"date":1698049161,"description":"","dir":"post/tech/language/nodejs/npm/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":3600,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":1698049161,"objectID":"f61d7cc2b817d00e0984a74ab321f17c","permalink":"https://WFUing.github.io/post/tech/language/nodejs/npm/basic/","publishdate":"2023-10-23T16:19:21+08:00","readingtime":8,"relpermalink":"/post/tech/language/nodejs/npm/basic/","section":"post","summary":"概述 npm有两种含义。 首先，npm 是一个网站，用来登记和管理 Node 的模块，网址为npmjs.org。 其次，npm 是一个命令行软件，用来在用户的电","tags":null,"title":"basic.md","type":"post","url":"/post/tech/language/nodejs/npm/basic/","weight":0,"wordcount":3521},{"author":null,"categories":null,"content":null,"date":1698049161,"description":"","dir":"post/tech/language/nodejs/npm/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":3100,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":1698049161,"objectID":"d7ac8e257b0ab546ad1937221fb89050","permalink":"https://WFUing.github.io/post/tech/language/nodejs/npm/install/","publishdate":"2023-10-23T16:19:21+08:00","readingtime":7,"relpermalink":"/post/tech/language/nodejs/npm/install/","section":"post","summary":"安装 npm install 基本用法 npm install命令用于安装模块。npm i是该命令的别名。 $ npm install lodash 上面命令在当前目录中安装了lodash模块。 默认安装的是最","tags":null,"title":"install.md","type":"post","url":"/post/tech/language/nodejs/npm/install/","weight":0,"wordcount":3085},{"author":null,"categories":null,"content":null,"date":1698049161,"description":"","dir":"post/tech/language/nodejs/npm/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":300,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":1698049161,"objectID":"574b43253d16b55ac829f7fb5ce8845a","permalink":"https://WFUing.github.io/post/tech/language/nodejs/npm/npm-exec/","publishdate":"2023-10-23T16:19:21+08:00","readingtime":1,"relpermalink":"/post/tech/language/nodejs/npm/npm-exec/","section":"post","summary":"npm exec 命令 npm exec用来执行某个 npm 模块的内部命令，不管该模块在本地还是在远程。它有一个别名x，即npm exec等同于npm x。 该命令与npx命","tags":null,"title":"npm-exec.md","type":"post","url":"/post/tech/language/nodejs/npm/npm-exec/","weight":0,"wordcount":251},{"author":null,"categories":null,"content":null,"date":1698049161,"description":"","dir":"post/tech/language/nodejs/npm/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":500,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":1698049161,"objectID":"b80ed83dab277173eff1fb7765b789fa","permalink":"https://WFUing.github.io/post/tech/language/nodejs/npm/npm-init/","publishdate":"2023-10-23T16:19:21+08:00","readingtime":1,"relpermalink":"/post/tech/language/nodejs/npm/npm-init/","section":"post","summary":"npm init 命令 npm init命令的作用，是生成package.json文件。它的别名是create。 新建一个目录，作为模块的开发目录。进入该目录，执行","tags":null,"title":"npm-init.md","type":"post","url":"/post/tech/language/nodejs/npm/npm-init/","weight":0,"wordcount":436},{"author":null,"categories":null,"content":null,"date":1698049161,"description":"","dir":"post/tech/language/nodejs/npm/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":500,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":1698049161,"objectID":"cdb4ccf6a13f42dfe1ffc478e085898c","permalink":"https://WFUing.github.io/post/tech/language/nodejs/npm/npm-link/","publishdate":"2023-10-23T16:19:21+08:00","readingtime":1,"relpermalink":"/post/tech/language/nodejs/npm/npm-link/","section":"post","summary":"npm link 命令 有时候，我们在本地修改了一些模块，想先测试这些修改是否有效。那么，怎么才能让依赖于该模块的应用，能够加载这些本地模块呢？ 一种方法是使","tags":null,"title":"npm-link.md","type":"post","url":"/post/tech/language/nodejs/npm/npm-link/","weight":0,"wordcount":452},{"author":null,"categories":null,"content":null,"date":1698049161,"description":"","dir":"post/tech/language/nodejs/npm/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":400,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":1698049161,"objectID":"ae7aca2334dfc393fae0bbf39e2f52e5","permalink":"https://WFUing.github.io/post/tech/language/nodejs/npm/npm-tag/","publishdate":"2023-10-23T16:19:21+08:00","readingtime":1,"relpermalink":"/post/tech/language/nodejs/npm/npm-tag/","section":"post","summary":"npm tag npm 允许为版本添加标签，方便用户安装特定版本。只要指定标签，就可以安装该标签下的最新版本。 发布模块时，如果不指定 tag，默认使用lates","tags":null,"title":"npm-tag.md","type":"post","url":"/post/tech/language/nodejs/npm/npm-tag/","weight":0,"wordcount":309},{"author":null,"categories":null,"content":null,"date":1698049161,"description":"","dir":"post/tech/language/nodejs/npm/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":300,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":1698049161,"objectID":"b47cb32bcf4953976ffc0fc9210b8d8c","permalink":"https://WFUing.github.io/post/tech/language/nodejs/npm/npm-token/","publishdate":"2023-10-23T16:19:21+08:00","readingtime":1,"relpermalink":"/post/tech/language/nodejs/npm/npm-token/","section":"post","summary":"npm token npm token命令用来管理认证令牌。 npm token list命令列出所有激活的认证令牌。 $ npm token list 上面命令的返回结果，以表格形式显示。如果加上--jso","tags":null,"title":"npm-token.md","type":"post","url":"/post/tech/language/nodejs/npm/npm-token/","weight":0,"wordcount":225},{"author":null,"categories":null,"content":null,"date":1698049040,"description":"","dir":"post/tech/language/nodejs/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":300,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":1698049040,"objectID":"4271b1775b06b09a326d959a72fce7f5","permalink":"https://WFUing.github.io/post/tech/language/nodejs/timer/","publishdate":"2023-10-23T16:17:20+08:00","readingtime":1,"relpermalink":"/post/tech/language/nodejs/timer/","section":"post","summary":"定时器 process.nextTick()会立即执行回调函数。 微任务队列。 setImmediate()， clearImmediate() setImmediate(). It can be passed to clearImmediate() setImmedia","tags":null,"title":"timer","type":"post","url":"/post/tech/language/nodejs/timer/","weight":0,"wordcount":239},{"author":null,"categories":null,"content":null,"date":1698049039,"description":"","dir":"post/tech/language/nodejs/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":400,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":1698049039,"objectID":"1ddf4651d45453a830cefd24165ca443","permalink":"https://WFUing.github.io/post/tech/language/nodejs/fs/","publishdate":"2023-10-23T16:17:19+08:00","readingtime":1,"relpermalink":"/post/tech/language/nodejs/fs/","section":"post","summary":"fs 模块 fs.createReadStream() fs.createReadStream方法读取一个文件，以 stream 的形式返回。 const readStream = fs.createReadStream( inputFilePath, { encoding: \u0026#39;utf8\u0026#39;, highWaterMark: 1024 } ); 该方法的第一个参数是文件的路径，第二","tags":null,"title":"fs","type":"post","url":"/post/tech/language/nodejs/fs/","weight":0,"wordcount":382},{"author":null,"categories":null,"content":null,"date":1698049039,"description":"","dir":"post/tech/language/nodejs/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":900,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":1698049039,"objectID":"ae16949b926cd548d17b666d29a6da15","permalink":"https://WFUing.github.io/post/tech/language/nodejs/promise/","publishdate":"2023-10-23T16:17:19+08:00","readingtime":2,"relpermalink":"/post/tech/language/nodejs/promise/","section":"post","summary":"Promise UnhandledPromiseRejectionWarning 如果 Promise 运行过程中抛出错误，或者状态变为rejected，但是没有相应的处理代码，那么 Node 会抛出一个警告UnhandledPromiseRe","tags":null,"title":"promise","type":"post","url":"/post/tech/language/nodejs/promise/","weight":0,"wordcount":833},{"author":null,"categories":null,"content":null,"date":1698049039,"description":"","dir":"post/tech/language/nodejs/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":1200,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":1698049039,"objectID":"bb6a84e8a81f59cf9568e2349de15c31","permalink":"https://WFUing.github.io/post/tech/language/nodejs/repl/","publishdate":"2023-10-23T16:17:19+08:00","readingtime":3,"relpermalink":"/post/tech/language/nodejs/repl/","section":"post","summary":"Node 的 REPL 环境 简介 REPL 是 read-eval-print-loop 的缩写，表示命令行下的 Node 引擎的一个互动式对话环境。用户在其中输入命令，就可以立刻看到结果。read 表示读取用户的输入，e","tags":null,"title":"repl","type":"post","url":"/post/tech/language/nodejs/repl/","weight":0,"wordcount":1146},{"author":null,"categories":null,"content":null,"date":1698048968,"description":"","dir":"post/tech/language/nodejs/module/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":100,"html":null,"keywords":null,"kind":"section","lang":"en","lastmod":1698048968,"objectID":"bb206fbda5b330e6de82785bc9272c8e","permalink":"https://WFUing.github.io/post/tech/language/nodejs/module/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/post/tech/language/nodejs/module/","section":"post","summary":"","tags":null,"title":"nodejs/module","type":"post","url":"/post/tech/language/nodejs/module/","weight":0,"wordcount":0},{"author":null,"categories":null,"content":null,"date":1698048968,"description":"","dir":"post/tech/language/nodejs/module/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":700,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":1698048968,"objectID":"d401cb599374f113de8708000d9b8a98","permalink":"https://WFUing.github.io/post/tech/language/nodejs/module/this/","publishdate":"2023-10-23T16:16:08+08:00","readingtime":2,"relpermalink":"/post/tech/language/nodejs/module/this/","section":"post","summary":"this 变量 Node 应用的顶层变量是global，对应浏览器的window变量。 顶层的 this 在 REPL 环境，顶层的this就指向global。 \u0026gt; global === this true 顶层变量是","tags":null,"title":"this.md","type":"post","url":"/post/tech/language/nodejs/module/this/","weight":0,"wordcount":661},{"author":null,"categories":null,"content":null,"date":1697778723,"description":"","dir":"post/tech/architecture/serverless/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":100,"html":null,"keywords":null,"kind":"section","lang":"en","lastmod":1697778723,"objectID":"d659578fdcbe25fe67c88a3414ff127d","permalink":"https://WFUing.github.io/post/tech/architecture/serverless/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/post/tech/architecture/serverless/","section":"post","summary":"Serverless 是一种计算模型，它使得开发者能够在无需管理服务器和基础架构的情况下运行代码（或称函数）。使用无服务器计算，开发者可以将代码上传到云平台，平台会在需要时根据流量自动进行资源分配和处理。","tags":null,"title":"Serverless","type":"post","url":"/post/tech/architecture/serverless/","weight":0,"wordcount":0},{"author":null,"categories":null,"content":null,"date":1697778723,"description":"","dir":"post/tech/architecture/serverless/tencentyun-serverless-api/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":900,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":1697778723,"objectID":"c766a833374ae49609eb097b32171410","permalink":"https://WFUing.github.io/post/tech/architecture/serverless/tencentyun-serverless-api/","publishdate":"2023-10-20T13:12:03+08:00","readingtime":2,"relpermalink":"/post/tech/architecture/serverless/tencentyun-serverless-api/","section":"post","summary":"腾讯云官方推荐并提供了使用控制台和使用Serverless 组件（Tencent Serverless Cloud Framework）两种方式用于管理云函数，分别在浏览器中和本地CLI中进行开发","tags":["serverless","tencentyun"],"title":"Tencentyun Serverless Api","type":"post","url":"/post/tech/architecture/serverless/tencentyun-serverless-api/","weight":0,"wordcount":837},{"author":null,"categories":null,"content":null,"date":1697777232,"description":"","dir":"post/tech/architecture/serverless/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":3900,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":1697777232,"objectID":"848d2cf783c7592d741d1b5ccedf5e0d","permalink":"https://WFUing.github.io/post/tech/architecture/serverless/alicloud-fc-api/","publishdate":"2023-10-20T12:47:12+08:00","readingtime":8,"relpermalink":"/post/tech/architecture/serverless/alicloud-fc-api/","section":"post","summary":"函数计算（Function Compute）是一个事件驱动的全托管 Serverless 计算服务，您无需管理服务器等基础设施，只需编写代码并上传，函数计算会为您准备好计算资源，并以弹性、可靠的方式运行您的代码。","tags":["serverless","alicloud"],"title":"Alicloud Function Compute API","type":"post","url":"/post/tech/architecture/serverless/alicloud-fc-api/","weight":0,"wordcount":3831},{"author":null,"categories":null,"content":null,"date":1697720289,"description":"","dir":"post/tech/architecture/git/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":500,"html":null,"keywords":null,"kind":"section","lang":"en","lastmod":1697720289,"objectID":"e6fab3a09ffe56888edd65fd067d6233","permalink":"https://WFUing.github.io/post/tech/architecture/git/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/post/tech/architecture/git/","section":"post","summary":"Git 是一个开源的分布式版本控制系统。","tags":null,"title":"Git","type":"post","url":"/post/tech/architecture/git/","weight":0,"wordcount":414},{"author":null,"categories":null,"content":null,"date":1697720289,"description":"","dir":"post/tech/architecture/git/git-principle/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":7800,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":1697720289,"objectID":"abb55668a0eab3ed4488a02bf4f13877","permalink":"https://WFUing.github.io/post/tech/architecture/git/git-principle/","publishdate":"2023-10-19T20:58:09+08:00","readingtime":16,"relpermalink":"/post/tech/architecture/git/git-principle/","section":"post","summary":"Git 和其它版本控制系统（包括 Subversion 和近似工具）的主要差别在于 Git 对待数据的方式。 从概念上来说，其它大部分系统以文件变更列表的方式存储信息，而 Git 是把数据看作是对小型文件系统的一系列快照。","tags":[""],"title":"Git Principle","type":"post","url":"/post/tech/architecture/git/git-principle/","weight":0,"wordcount":7763},{"author":null,"categories":null,"content":null,"date":1697719243,"description":"","dir":"post/tech/architecture/git/git-tutorial/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":9600,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":1697719243,"objectID":"b2218197e9e572d2d6ea82c4314b8c2b","permalink":"https://WFUing.github.io/post/tech/architecture/git/git-tutorial/","publishdate":"2023-10-19T20:40:43+08:00","readingtime":19,"relpermalink":"/post/tech/architecture/git/git-tutorial/","section":"post","summary":"Git 帮助手册 国外网友制作了一张 Git Cheat Sheet，总结很精炼，各位不妨收藏一下。 本节选择性介绍 git 中比较常用的命令行场景。 安装 （1）Debian/U","tags":["git"],"title":"Git Tutorial","type":"post","url":"/post/tech/architecture/git/git-tutorial/","weight":0,"wordcount":9519},{"author":null,"categories":null,"content":null,"date":1697687267,"description":"","dir":"post/tech/architecture/shell/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":12800,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":1697687267,"objectID":"70e555aed01e03acbbd7062506eaaeea","permalink":"https://WFUing.github.io/post/tech/architecture/shell/","publishdate":"2023-10-19T11:47:47+08:00","readingtime":26,"relpermalink":"/post/tech/architecture/shell/","section":"post","summary":"Shell 是一个用 C 语言编写的程序，是用户使用 Linux 的桥梁，它既是一种命令语言，又是一种程序设计语言。","tags":["shell"],"title":"Shell 简介","type":"post","url":"/post/tech/architecture/shell/","weight":0,"wordcount":12775},{"author":null,"categories":null,"content":null,"date":1697631266,"description":"","dir":"post/tech/language/functional-programming/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":14100,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":1697631266,"objectID":"7e1afaf8c0beaa2ece4063b05f2e2f21","permalink":"https://WFUing.github.io/post/tech/language/functional-programming/","publishdate":"2023-10-18T20:14:26+08:00","readingtime":28,"relpermalink":"/post/tech/language/functional-programming/","section":"post","summary":"我们将注意力转向过程抽象，这是一种将复杂程序分解成 functions (也称为 procedures 或 subroutines 。这些术语在不同语境中的用法有细微差别，但就我们的目的而言，我们将把它们视","tags":["functional programming","language"],"title":"Functional Programming","type":"post","url":"/post/tech/language/functional-programming/","weight":0,"wordcount":14000},{"author":null,"categories":null,"content":null,"date":1697606182,"description":"","dir":"post/read/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":4000,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":1697606182,"objectID":"b7e1bf8744adb52e2f5d9bfceb0bdae8","permalink":"https://WFUing.github.io/post/read/%E4%BA%BA%E4%BB%B6/","publishdate":"2023-10-18T13:16:22+08:00","readingtime":8,"relpermalink":"/post/read/%E4%BA%BA%E4%BB%B6/","section":"post","summary":"一、书名和作者 《人件》 作者： Tom DeMarco Timothy Lister 二、书籍概览 主要论点和结构：软件开发不仅仅是技术问题，更是管理问题。它强调了管理人力资源的关键性，特别是","tags":null,"title":"《人件》读书笔记","type":"post","url":"/post/read/%E4%BA%BA%E4%BB%B6/","weight":0,"wordcount":3989},{"author":null,"categories":null,"content":null,"date":1697606182,"description":"","dir":"post/read/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":100,"html":null,"keywords":null,"kind":"section","lang":"en","lastmod":1697606182,"objectID":"21474009be38b11288ef128552430709","permalink":"https://WFUing.github.io/post/read/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/post/read/","section":"post","summary":"一个人但凡有了读书的癖好，也就有了看世界的一种特别的眼光，甚至有了一个属于他（她）的丰富多彩的世界。\u0026ndash;周国平","tags":null,"title":"Reading","type":"post","url":"/post/read/","weight":0,"wordcount":0},{"author":null,"categories":null,"content":null,"date":1697514465,"description":"","dir":"post/tech/architecture/serverless/serverless-dev/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":3000,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":1697514465,"objectID":"31b721e66dbf638c764368edad617b5b","permalink":"https://WFUing.github.io/post/tech/architecture/serverless/serverless-dev/","publishdate":"2023-10-17T11:47:45+08:00","readingtime":6,"relpermalink":"/post/tech/architecture/serverless/serverless-dev/","section":"post","summary":"Serverless Devs 是一个开源开放的 Serverless 开发者平台，致力于为开发者提供强大的工具链体系。通过该平台，开发者不仅可以一键体验多云 Serverless 产品，极速部署 Serverless 项目，还可以在","tags":["serverless"],"title":"Serverless Dev","type":"post","url":"/post/tech/architecture/serverless/serverless-dev/","weight":0,"wordcount":2958},{"author":null,"categories":null,"content":null,"date":1697510865,"description":"","dir":"post/tech/architecture/serverless/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":900,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":1697510865,"objectID":"b747505740457af2366f7727c1e0d9fb","permalink":"https://WFUing.github.io/post/tech/architecture/serverless/serverless-concept-models/","publishdate":"2023-10-17T10:47:45+08:00","readingtime":2,"relpermalink":"/post/tech/architecture/serverless/serverless-concept-models/","section":"post","summary":"Serverless 是一种计算模型，它使得开发者能够在无需管理服务器和基础架构的情况下运行代码（或称函数）。使用无服务器计算，开发者可以将代码上传到云平台，平","tags":["serverless"],"title":"Serverless Concept Models","type":"post","url":"/post/tech/architecture/serverless/serverless-concept-models/","weight":0,"wordcount":869},{"author":null,"categories":null,"content":null,"date":1697441384,"description":"","dir":"post/tech/language/metaprogramming/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":7100,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":1697441384,"objectID":"de977b8eecacfc28c7ba1f8f5fbbd7d6","permalink":"https://WFUing.github.io/post/tech/language/metaprogramming/","publishdate":"2023-10-16T15:29:44+08:00","readingtime":15,"relpermalink":"/post/tech/language/metaprogramming/","section":"post","summary":"元编程是编写可在其他程序上运行的计算机程序的技术。诸如编译器和程序分析器之类的系统可以被视为元程序，因为它们将其他程序作为输入。我们将在这里","tags":["metaprogramming","language"],"title":"meta-programming","type":"post","url":"/post/tech/language/metaprogramming/","weight":0,"wordcount":7083},{"author":null,"categories":null,"content":null,"date":1697426173,"description":"","dir":"post/tech/architecture/iot/state-machine/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":1300,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":1697426173,"objectID":"5e836449da48ed4ddea14fcc47a9f40d","permalink":"https://WFUing.github.io/post/tech/architecture/iot/state-machine/","publishdate":"2023-10-16T11:16:13+08:00","readingtime":3,"relpermalink":"/post/tech/architecture/iot/state-machine/","section":"post","summary":"有限状态机 (finite-state machine, FSM) 是一种抽象机器，在任何给定时间内都可以处于有限个状态中的一个状态。FSM 可以根据某些外部输入从一种状态转换到另一种状态，从一种状态转换到另一种状态称为转换。","tags":null,"title":"State Machine","type":"post","url":"/post/tech/architecture/iot/state-machine/","weight":0,"wordcount":1227},{"author":null,"categories":null,"content":null,"date":1697334723,"description":"","dir":"post/tech/language/code-generation/antlr-code-generation/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":6100,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":1697334723,"objectID":"87b171244aebae48fd4c26b194b31f8d","permalink":"https://WFUing.github.io/post/tech/language/code-generation/antlr-code-generation/","publishdate":"2023-10-15T09:52:03+08:00","readingtime":13,"relpermalink":"/post/tech/language/code-generation/antlr-code-generation/","section":"post","summary":"ANTLR 是 \u003cstrong\u003eAN\u003c/strong\u003eother \u003cstrong\u003eT\u003c/strong\u003eool for \u003cstrong\u003eL\u003c/strong\u003eanguage \u003cstrong\u003eR\u003c/strong\u003eecognition 的缩写，是一个功能强大的解析器生成器框架，用于从语法文件中构建语言识别器、编译器和翻译器，语法文件中包含从源语言到目标语言的每个语句所要执行的操作。","tags":["code generation","dsl","antlr"],"title":"Antlr Code Generation","type":"post","url":"/post/tech/language/code-generation/antlr-code-generation/","weight":0,"wordcount":6025},{"author":null,"categories":null,"content":null,"date":1697334723,"description":"","dir":"post/tech/language/code-generation/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":100,"html":null,"keywords":null,"kind":"section","lang":"en","lastmod":1697334723,"objectID":"02bea97b2d6645cbe1323d909e689202","permalink":"https://WFUing.github.io/post/tech/language/code-generation/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/post/tech/language/code-generation/","section":"post","summary":"代码生成是指生成程序代码的软件技术。IDE就是一个典型例子：只需点击一个按钮，就能创建一个骨架类来实现接口或类似功能。","tags":null,"title":"Code Generation","type":"post","url":"/post/tech/language/code-generation/","weight":0,"wordcount":0},{"author":null,"categories":null,"content":null,"date":1697282984,"description":"","dir":"post/tech/language/programming-language-pool/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":2300,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":1697282984,"objectID":"45ab166586df01529ceb032290657023","permalink":"https://WFUing.github.io/post/tech/language/programming-language-pool/","publishdate":"2023-10-14T19:29:44+08:00","readingtime":5,"relpermalink":"/post/tech/language/programming-language-pool/","section":"post","summary":"下面列出了所有类型的编程语言的完整分类列表。编程语言没有严格的分类方案。因此，我们可以将一种语言视为不止一种编程语言的示例。 让我们一一理解这","tags":["language"],"title":"Programming Language List","type":"post","url":"/post/tech/language/programming-language-pool/","weight":0,"wordcount":2283},{"author":null,"categories":null,"content":null,"date":1697256054,"description":"","dir":"post/tech/architecture/distributed/zookeeper/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":200,"html":null,"keywords":null,"kind":"section","lang":"en","lastmod":1697256054,"objectID":"b7bf5cfaba746002283c2a624f91e903","permalink":"https://WFUing.github.io/post/tech/architecture/distributed/zookeeper/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/post/tech/architecture/distributed/zookeeper/","section":"post","summary":"ZooKeeper 是 Apache 的顶级项目。ZooKeeper 为分布式应用提供了高效且可靠的分布式协调服务，提供了诸如统一命名服务、配置管理和分布式锁等分布式的基础服","tags":null,"title":"ZooKeeper","type":"post","url":"/post/tech/architecture/distributed/zookeeper/","weight":0,"wordcount":121},{"author":null,"categories":null,"content":null,"date":1697256054,"description":"","dir":"post/tech/architecture/distributed/zookeeper/zookeeper-code/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":100,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":1697256054,"objectID":"e0b94721afe3ac5d3a811fa7c84d74fd","permalink":"https://WFUing.github.io/post/tech/architecture/distributed/zookeeper/zookeeper-code/","publishdate":"2023-10-14T12:00:54+08:00","readingtime":1,"relpermalink":"/post/tech/architecture/distributed/zookeeper/zookeeper-code/","section":"post","summary":"Resources 官方 ZooKeeper 官网 ZooKeeper 官方文档 ZooKeeper Github 博客 ZooKeeper源码阅读心得分享+源码基本结构+源码环境搭建 手摸手教你阅读和调试大型开源项目 ZooKeeper","tags":null,"title":"Zookeeper Code","type":"post","url":"/post/tech/architecture/distributed/zookeeper/zookeeper-code/","weight":0,"wordcount":63},{"author":null,"categories":null,"content":null,"date":1697198836,"description":"","dir":"post/tech/architecture/distributed/zookeeper/zookeeper-theory/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":9600,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":1697198836,"objectID":"ac0726bdb28f8c5198aefa47d6e982ba","permalink":"https://WFUing.github.io/post/tech/architecture/distributed/zookeeper/zookeeper-theory/","publishdate":"2023-10-13T20:07:16+08:00","readingtime":20,"relpermalink":"/post/tech/architecture/distributed/zookeeper/zookeeper-theory/","section":"post","summary":"ZooKeeper 简介 ZooKeeper 是什么 ZooKeeper 是 Apache 的顶级项目。ZooKeeper 为分布式应用提供了高效且可靠的分布式协调服务，提供了诸如统一命名服务、配置管理和分布式锁等","tags":null,"title":"Zookeeper 原理","type":"post","url":"/post/tech/architecture/distributed/zookeeper/zookeeper-theory/","weight":0,"wordcount":9528},{"author":null,"categories":null,"content":null,"date":1697195236,"description":"","dir":"post/tech/architecture/distributed/overview/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":1500,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":1697195236,"objectID":"d109b7fe35d84526a59139afe26f2dd0","permalink":"https://WFUing.github.io/post/tech/architecture/distributed/overview/","publishdate":"2023-10-13T19:07:16+08:00","readingtime":3,"relpermalink":"/post/tech/architecture/distributed/overview/","section":"post","summary":"什么是分布式系统 将硬件或软件组件(服务)分布在不同的网络计算机上，并且通过消息传递进行通信和协调。 特点 分布性 对等性 平等: 无主从之分 独立: 拥有","tags":null,"title":"分布式系统概述","type":"post","url":"/post/tech/architecture/distributed/overview/","weight":0,"wordcount":1420},{"author":null,"categories":null,"content":null,"date":1697189257,"description":"","dir":"post/tech/language/code-generation/asyncapi-code-generator/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":3400,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":1697189257,"objectID":"f8aeed712c284738b75a36c60ab35f27","permalink":"https://WFUing.github.io/post/tech/language/code-generation/asyncapi-code-generator/","publishdate":"2023-10-13T17:27:37+08:00","readingtime":7,"relpermalink":"/post/tech/language/code-generation/asyncapi-code-generator/","section":"post","summary":"Background IIoT（工业物联网）架构通常是分布式和异步的，通信由事件驱动，如消息的发布（和相应的订阅）。这些异步架构提高了可扩展性和对变化的耐受性，","tags":["code generation","dsl","asyncapi","xtext"],"title":"A Modeling Editor and Code Generator for message-driven architectures with AsyncAPI","type":"post","url":"/post/tech/language/code-generation/asyncapi-code-generator/","weight":0,"wordcount":3342},{"author":null,"categories":null,"content":null,"date":1697186781,"description":"","dir":"post/tech/language/code-generation/openapi-code-generator/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":2300,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":1697186781,"objectID":"89c4ec6b9b755d3da8df78d583d0ab08","permalink":"https://WFUing.github.io/post/tech/language/code-generation/openapi-code-generator/","publishdate":"2023-10-13T16:46:21+08:00","readingtime":5,"relpermalink":"/post/tech/language/code-generation/openapi-code-generator/","section":"post","summary":"OpenAPI Generator 可根据 OpenAPI yaml 规范生成代码，并支持多种语言。 如何使用 OpenAPI 本节介绍如何创建一个基本的 OpenAPI yaml 规范，并用它为 Spring Boot 应用程序生成服务器端代码。 Create OpenAPI spec 首先要","tags":["code generation","dsl","openapi","spring"],"title":"Openapi Code Generator","type":"post","url":"/post/tech/language/code-generation/openapi-code-generator/","weight":0,"wordcount":2249},{"author":null,"categories":null,"content":null,"date":1697174367,"description":"","dir":"post/tech/network/restful/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":2600,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":1697174367,"objectID":"de17d42b410927087f4f93009604e909","permalink":"https://WFUing.github.io/post/tech/network/restful/","publishdate":"2023-10-13T13:19:27+08:00","readingtime":6,"relpermalink":"/post/tech/network/restful/","section":"post","summary":"REST 全称是 \u003cstrong\u003eRe\u003c/strong\u003epresentational \u003cstrong\u003eS\u003c/strong\u003etate \u003cstrong\u003eT\u003c/strong\u003eransfer（表现层状态转化），更具体的全称是 Resource Representational State Transfer（资源表现层状态转化），具体可以见 Roy Thomas Fielding 的博士论文","tags":["restful","interview"],"title":"Restful API Tutorial","type":"post","url":"/post/tech/network/restful/","weight":0,"wordcount":2596},{"author":null,"categories":null,"content":null,"date":1697159773,"description":"","dir":"post/tech/architecture/iot/actor/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":3300,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":1697159773,"objectID":"a5976fffd77b4df501a232be1ebc4843","permalink":"https://WFUing.github.io/post/tech/architecture/iot/actor/","publishdate":"2023-10-13T09:16:13+08:00","readingtime":7,"relpermalink":"/post/tech/architecture/iot/actor/","section":"post","summary":"Actor Model CPU 上有多个内核。如果我们想充分利用现有的这些硬件，就需要一种并发运行代码的方法。数十年来无法追踪的错误和开发人员的沮丧都表明，线程并不是","tags":null,"title":"Actor","type":"post","url":"/post/tech/architecture/iot/actor/","weight":0,"wordcount":3249},{"author":null,"categories":null,"content":null,"date":1697112830,"description":"","dir":"post/tech/language/code-generation/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":100,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":1697112830,"objectID":"cda20135ec7bc3bfa6ce20b39cf8cc0a","permalink":"https://WFUing.github.io/post/tech/language/code-generation/ai-code-generators/","publishdate":"2023-10-12T20:13:50+08:00","readingtime":1,"relpermalink":"/post/tech/language/code-generation/ai-code-generators/","section":"post","summary":"Resources Demos https://github.com/gofireflyio/aiac https://github.com/JustAIGithub/AI-Code-Convert Blogs 25 Best AI Code Generators ","tags":["code generation","ai"],"title":"AI Code Generators","type":"post","url":"/post/tech/language/code-generation/ai-code-generators/","weight":0,"wordcount":10},{"author":null,"categories":null,"content":null,"date":1697111265,"description":"","dir":"post/tech/architecture/git/how-to-write-a-git-commit-message/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":2200,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":1697111265,"objectID":"5470d8b23b30fc837c5a3e756505dbe7","permalink":"https://WFUing.github.io/post/tech/architecture/git/how-to-write-a-git-commit-message/","publishdate":"2023-10-12T19:47:45+08:00","readingtime":5,"relpermalink":"/post/tech/architecture/git/how-to-write-a-git-commit-message/","section":"post","summary":"Resources git tutorial: https://wyag.thb.lt/ 动图展示10大Git命令: https://zhuanlan.zhihu.com/p/132573100 git intro: https://missing.csail.mit.edu/2020/version-control/ book: https://git-scm.com/book/en/v2 commit convention 规范: https://www.conventionalcommits.org/en/v1.0.0/#summary Write yourself a Git：https://wyag.thb.lt/ 如何编写Git Commit Message? 为了创建一","tags":["git"],"title":"How to Write a Git Commit Message","type":"post","url":"/post/tech/architecture/git/how-to-write-a-git-commit-message/","weight":0,"wordcount":2180},{"author":null,"categories":null,"content":null,"date":1697111025,"description":"","dir":"post/tech/os/linux-instructions/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":13800,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":1697111025,"objectID":"d58fb8f155127199efeb3a9b699a1ca0","permalink":"https://WFUing.github.io/post/tech/os/linux-instructions/","publishdate":"2023-10-12T19:43:45+08:00","readingtime":28,"relpermalink":"/post/tech/os/linux-instructions/","section":"post","summary":"Linux 的命令确实非常多，然而熟悉 Linux 的人从来不会因为 Linux 的命令太多而烦恼。因为我们仅仅只需要掌握常用命令，就完全可以驾驭 Linux。 接下来，让我们一","tags":["linux"],"title":"45 个常用Linux 命令，让你轻松玩转Linux！","type":"post","url":"/post/tech/os/linux-instructions/","weight":0,"wordcount":13756},{"author":null,"categories":null,"content":null,"date":1697111025,"description":"","dir":"post/tech/algorithm/ai/chatgpt-guide/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":2800,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":1697111025,"objectID":"67a42ac83117c378a2b419890f790457","permalink":"https://WFUing.github.io/post/tech/algorithm/ai/chatgpt-guide/","publishdate":"2023-10-12T19:43:45+08:00","readingtime":6,"relpermalink":"/post/tech/algorithm/ai/chatgpt-guide/","section":"post","summary":"Six strategies for getting better results Write clear instructions GPT 无法读懂你的心思。如果产出太长，请要求简短回复。如果结果太简单，要求专家级的写作。如果您不喜欢格式，请演示您希望看到的格","tags":["chatgpt"],"title":"chatGPT 使用指南","type":"post","url":"/post/tech/algorithm/ai/chatgpt-guide/","weight":0,"wordcount":2780},{"author":null,"categories":null,"content":null,"date":1697111025,"description":"","dir":"post/tech/os/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":100,"html":null,"keywords":null,"kind":"section","lang":"en","lastmod":1697111025,"objectID":"b7f19f4d4495c59f40cb4ed4a511e12c","permalink":"https://WFUing.github.io/post/tech/os/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/post/tech/os/","section":"post","summary":"操作系统（Operating System，简称OS）是计算机系统的核心软件，负责管理和协调硬件资源、提供用户与计算机的接口、执行和监视程序。它控制文件管理、内存分配、多任务处理、网络通信等关键功能，以确保计算机的稳定运行。操作系统充当应用程序和硬件之间的中介，提供便捷的方式来执行任务、访问资源，并确保系统的安全性和效率。不同的操作系统包括Windows、macOS、Linux等，适用于各种计算设备。","tags":null,"title":"Operating System","type":"post","url":"/post/tech/os/","weight":0,"wordcount":0},{"author":null,"categories":null,"content":null,"date":1697110728,"description":"","dir":"post/tech/network/frp-nat-traversal/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":1300,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":1697110728,"objectID":"75992ba4c4255e8ef5b6186baff12711","permalink":"https://WFUing.github.io/post/tech/network/frp-nat-traversal/","publishdate":"2023-10-12T19:38:48+08:00","readingtime":3,"relpermalink":"/post/tech/network/frp-nat-traversal/","section":"post","summary":"Resources github：https://github.com/fatedier/frp document：https://gofrp.org/docs","tags":["nat traversal"],"title":"Frp Nat Traversal","type":"post","url":"/post/tech/network/frp-nat-traversal/","weight":0,"wordcount":1279},{"author":null,"categories":null,"content":null,"date":1697110184,"description":"","dir":"post/tech/language/code-generation/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":100,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":1697110184,"objectID":"0dbd32d2bedd45a00c89e6fbb7a5e26b","permalink":"https://WFUing.github.io/post/tech/language/code-generation/telosys-code-generation-tool/","publishdate":"2023-10-12T19:29:44+08:00","readingtime":1,"relpermalink":"/post/tech/language/code-generation/telosys-code-generation-tool/","section":"post","summary":"Resources url: https://www.telosys.org/ tutorial: https://tomassetti.me/telosys-code-generation-tool/ ","tags":["code generation","telosys"],"title":"Telosys: a Code Generation Tool by Laurent Guerin","type":"post","url":"/post/tech/language/code-generation/telosys-code-generation-tool/","weight":0,"wordcount":5},{"author":null,"categories":null,"content":null,"date":1697109382,"description":"","dir":"post/read/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":4300,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":1697109382,"objectID":"0ced536e0252070c8bfd05436c49355b","permalink":"https://WFUing.github.io/post/read/%E4%BA%BA%E6%9C%88%E7%A5%9E%E8%AF%9D/","publishdate":"2023-10-12T19:16:22+08:00","readingtime":9,"relpermalink":"/post/read/%E4%BA%BA%E6%9C%88%E7%A5%9E%E8%AF%9D/","section":"post","summary":"一、书名和作者 书名：《人月神话》 作者：布鲁克斯(FrederickP.Brooks.Jr.) 二、书籍概览 主要论点和结构 《人月神话》是一本旨在","tags":null,"title":"《人月神话》阅读笔记","type":"post","url":"/post/read/%E4%BA%BA%E6%9C%88%E7%A5%9E%E8%AF%9D/","weight":0,"wordcount":4205},{"author":null,"categories":null,"content":null,"date":1697102162,"description":"","dir":"post/tech/architecture/devoops/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":2500,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":1697102162,"objectID":"f8b547482e930ee462383e59f1e6fcee","permalink":"https://WFUing.github.io/post/tech/architecture/devoops/","publishdate":"2023-10-12T17:16:02+08:00","readingtime":5,"relpermalink":"/post/tech/architecture/devoops/","section":"post","summary":"DevOps 集文化理念、实践和工具于一身，它强调团队授权、跨团队沟通和协作以及技术自动化，其最终目标是优化质量和交付","tags":null,"title":"DevOps 简介","type":"post","url":"/post/tech/architecture/devoops/","weight":0,"wordcount":2452},{"author":null,"categories":null,"content":null,"date":1697101517,"description":"","dir":"post/tech/algorithm/leetcode/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":1100,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":1697101517,"objectID":"d5ac748f33a8121b9fd612cc8a736867","permalink":"https://WFUing.github.io/post/tech/algorithm/leetcode/","publishdate":"2023-10-12T17:05:17+08:00","readingtime":3,"relpermalink":"/post/tech/algorithm/leetcode/","section":"post","summary":"动态规划 【LeetCode 55】跳跃游戏 【LeetCode 72】编辑距离 【LeetCode 115】不同的子序列 【LeetCode 124】二叉","tags":["leetcode"],"title":"Leetcode","type":"post","url":"/post/tech/algorithm/leetcode/","weight":0,"wordcount":1019},{"author":null,"categories":null,"content":null,"date":1697093024,"description":"","dir":"post/tech/language/code-generation/code-generation-for-langium-based-dsls/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":7800,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":1697093024,"objectID":"ec01dab7a8e7108340fecc07b10ca08e","permalink":"https://WFUing.github.io/post/tech/language/code-generation/code-generation-for-langium-based-dsls/","publishdate":"2023-10-12T14:43:44+08:00","readingtime":16,"relpermalink":"/post/tech/language/code-generation/code-generation-for-langium-based-dsls/","section":"post","summary":"DSL 和 DSL 工具的一个重要方面是代码生成。DSL 本身在形式化、指定和交流内容方面具有优势，因为它们具有特定领域的性质。但是，如果能从指定的内容中推","tags":["code generation","langium"],"title":"Code generation for Langium-based DSLs","type":"post","url":"/post/tech/language/code-generation/code-generation-for-langium-based-dsls/","weight":0,"wordcount":7724},{"author":null,"categories":null,"content":null,"date":1697093024,"description":"","dir":"post/tech/language/code-generation/template-engine/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":1000,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":1697093024,"objectID":"564b666ae654f6d09a0aeeb3bba8c573","permalink":"https://WFUing.github.io/post/tech/language/code-generation/template-engine/","publishdate":"2023-10-12T14:43:44+08:00","readingtime":2,"relpermalink":"/post/tech/language/code-generation/template-engine/","section":"post","summary":"模板引擎 模板引擎（也称为模板处理器或模板解析器）是设计用于将模板与数据模型结合起来以生成结果文档的软件，编写模板所用的语言称为模板语言或模板","tags":["code generation","template engine"],"title":"Template Engine","type":"post","url":"/post/tech/language/code-generation/template-engine/","weight":0,"wordcount":911},{"author":null,"categories":null,"content":null,"date":1697092745,"description":"","dir":"post/tech/architecture/git/how-to-build-github-blog-with-hugo/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":200,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":1697092745,"objectID":"a0e8f5763a7ec774f6a408c4e3c79673","permalink":"https://WFUing.github.io/post/tech/architecture/git/how-to-build-github-blog-with-hugo/","publishdate":"2023-10-12T14:39:05+08:00","readingtime":1,"relpermalink":"/post/tech/architecture/git/how-to-build-github-blog-with-hugo/","section":"post","summary":"今天花了一点时间搭建了自己的GitHub的博客，当然咯，试验阶段总会发生很多乱七八糟的问题，记录下处理问题过程中几个比较 nice 的 blog Resources 系列文章，用","tags":["hugo","blog"],"title":"How to Build Github Blog With Hugo","type":"post","url":"/post/tech/architecture/git/how-to-build-github-blog-with-hugo/","weight":0,"wordcount":127},{"author":null,"categories":null,"content":null,"date":1697082020,"description":"","dir":"post/tech/language/code-generation/a-guide-to-code-generation/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":6900,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":1697082020,"objectID":"741bb24993f9a0df2389645a155b33a3","permalink":"https://WFUing.github.io/post/tech/language/code-generation/a-guide-to-code-generation/","publishdate":"2023-10-12T11:40:20+08:00","readingtime":14,"relpermalink":"/post/tech/language/code-generation/a-guide-to-code-generation/","section":"post","summary":"为什么要用代码生成 productivity：使用代码生成，只需编写一次 generator ，就可以根据需要多次重复使用。向 generator 提供特定输入并调用它比手动编写代码","tags":["code generation"],"title":"A Guide to Code Generation","type":"post","url":"/post/tech/language/code-generation/a-guide-to-code-generation/","weight":0,"wordcount":6843},{"author":null,"categories":null,"content":null,"date":1642037145,"description":"","dir":"post/tech/algorithm/ai/cross-entropy/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":1900,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":1642037145,"objectID":"1c0903996159324398073d4935c38fac","permalink":"https://WFUing.github.io/post/tech/algorithm/ai/cross-entropy/","publishdate":"2022-01-13T09:25:45+08:00","readingtime":4,"relpermalink":"/post/tech/algorithm/ai/cross-entropy/","section":"post","summary":"案例驱动 通过几个简单的例子来解释和总结什么是交叉熵（Cross Entropy）以及机器学习分类问题中为什么使用交叉熵。 第一个例子 假设随机从一","tags":["cross entropy"],"title":"交叉熵","type":"post","url":"/post/tech/algorithm/ai/cross-entropy/","weight":0,"wordcount":1808},{"author":null,"categories":null,"content":null,"date":-62135596800,"description":"","dir":"about/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":600,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"8576ec274c98b3831668a172fa632d80","permalink":"https://WFUing.github.io/about/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/about/","section":"","summary":"About Me Huabing Zhao is a software architect, an Istio Member and an ONAP PTL. He has a solid experience in the information and telecommunication technology industry for more than 17 years. Throughout his career, he has built a number of large-scale, cross-country software systems, most of them are still running in production. He loves open source and has been contributing to various open source projects, he is a member","tags":null,"title":"","type":"page","url":"/about/","weight":0,"wordcount":500},{"author":null,"categories":null,"content":null,"date":-62135596800,"description":"","dir":"notes/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":100,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"1ede8046f9c3a02d422dea7bbf324e64","permalink":"https://WFUing.github.io/notes/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/notes/","section":"","summary":"Go 语言学习笔记 Envoy 学习笔记","tags":null,"title":"","type":"page","url":"/notes/","weight":0,"wordcount":12},{"author":null,"categories":null,"content":null,"date":-62135596800,"description":"","dir":"search/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":100,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"8946788897930c0c0c39fbfcd30ff2e4","permalink":"https://WFUing.github.io/search/placeholder/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/search/placeholder/","section":"search","summary":"","tags":null,"title":"","type":"search","url":"/search/placeholder/","weight":0,"wordcount":0},{"author":null,"categories":null,"content":"Archive of historical posts.","date":-62135596800,"description":"Archive of historical posts.","dir":"archive/","excerpt_html":"Archive of historical posts.","excerpt_text":"Archive of historical posts.","expirydate":-62135596800,"fuzzywordcount":100,"html":"Archive of historical posts.","keywords":null,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"a06e5ce9eca4c3260843078104889780","permalink":"https://WFUing.github.io/archive/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/archive/","section":"","summary":"","tags":null,"title":"Posts Archive","type":"archive","url":"/archive/","weight":0,"wordcount":0},{"author":null,"categories":null,"content":null,"date":-62135596800,"description":"","dir":"post/tech/safe/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":100,"html":null,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"objectID":"6e8753cb2bb16efe5ce5dd30c91a07ab","permalink":"https://WFUing.github.io/post/tech/safe/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/post/tech/safe/","section":"post","summary":"Safety 是保护计算机系统、网络和数据免受未经授权的访问、破坏、窃取或损坏的措施和实践，旨在确保数据完整性、机密性和可用性。","tags":null,"title":"Safety","type":"post","url":"/post/tech/safe/","weight":0,"wordcount":0}]