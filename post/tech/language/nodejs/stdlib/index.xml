<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>nodejs/stdlib on Waiting For You</title>
    <link>https://WFUing.github.io/post/tech/language/nodejs/stdlib/</link>
    <description>Recent content in nodejs/stdlib on Waiting For You</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Mon, 23 Oct 2023 16:19:36 +0800</lastBuildDate><atom:link href="https://WFUing.github.io/post/tech/language/nodejs/stdlib/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>cluster.md</title>
      <link>https://WFUing.github.io/post/tech/language/nodejs/stdlib/cluster/</link>
      <pubDate>Mon, 23 Oct 2023 16:19:36 +0800</pubDate>
      
      <guid>https://WFUing.github.io/post/tech/language/nodejs/stdlib/cluster/</guid>
      <description>cluster 模块 cluster模块用于组建 Node.js 应用的集群。
cluster.isMaster属性表示当前进程是否为主进程。
1 2 const cluster = require(&amp;#39;cluster&amp;#39;); const isMaster = cluster.isMaster; cluster.fork()方法复制当前进程。
1 2 3 4 5 6 7 8 9 10 11 12 13 14 const cluster = require(&amp;#39;cluster&amp;#39;); const { cpus } = require(&amp;#39;os&amp;#39;); const numWorkers = cpus().length; const isMaster = cluster.isMaster; if (isMaster) { process.stdout.write(&amp;#39;master process&amp;#39;); const workers = []; for(let i = 0; i &amp;lt; numWorkers; i++) { workers.push(cluster.fork()); } } else { process.</description>
    </item>
    
    <item>
      <title>events.md</title>
      <link>https://WFUing.github.io/post/tech/language/nodejs/stdlib/events/</link>
      <pubDate>Mon, 23 Oct 2023 16:19:36 +0800</pubDate>
      
      <guid>https://WFUing.github.io/post/tech/language/nodejs/stdlib/events/</guid>
      <description>events 模块 Node 通过 events 模块提供事件，形成模块之间的通信机制，消除模块与模块的强耦合。
概述 events模块提供一个构造函数，可以用来生成事件发生器的实例。
1 2 const EventEmitter = require(&amp;#39;events&amp;#39;); const emitter = new EventEmitter(); 上面代码中，emitter就是事件发生器的实例。
emit()方法用于触发事件。
1 emitter.emit(&amp;#39;user-registered&amp;#39;, user); 上面代码触发了user-registered事件，第二个参数user是事件传递的数据。
on()方法用于监听事件。
1 2 3 emitter.on(&amp;#39;user-registered&amp;#39;, (user) =&amp;gt; { console.log(&amp;#39;event has occured&amp;#39;); }); 注意，emit()方法和on()方法都是同步的，请看下面的例子。
1 2 3 4 5 6 7 8 9 10 11 12 13 14 emitter.on(&amp;#39;someEvent&amp;#39;, function () { console.log(&amp;#39;event has occured&amp;#39;); }); function f() { console.log(&amp;#39;start&amp;#39;); emitter.emit(&amp;#39;someEvent&amp;#39;); console.log(&amp;#39;end&amp;#39;); } f() // start // event has occured // end 上面代码中，emit()方法执行以后，on()方法会立刻执行。只有等到on()方法执行结束以后，emit()后面的方法才会继续执行。</description>
    </item>
    
    <item>
      <title>http.md</title>
      <link>https://WFUing.github.io/post/tech/language/nodejs/stdlib/http/</link>
      <pubDate>Mon, 23 Oct 2023 16:19:36 +0800</pubDate>
      
      <guid>https://WFUing.github.io/post/tech/language/nodejs/stdlib/http/</guid>
      <description>http 模块 http模块用于 HTTP 通信。
http.Server http.Server属性指向一个类，表示 Web 服务器实例。
这个类继承了net.Server，而net.Server继承了 EventEmitter 接口，因此可以使用server.on()方法监听事情。最重要的一个事件是request，表示收到 HTTP 请求。
1 2 3 server.on(&amp;#39;request&amp;#39;, (request, response) =&amp;gt; { response.end(&amp;#39;Hello, world!&amp;#39;); }); server.listen()方法用于启动 Web 服务。这个方法需要指定监听的端口，以及一个回调函数（启动后要做什么）。
1 2 3 server.listen(PORT, () =&amp;gt; { console.log(`starting server at port ${PORT}`); }); http.createServer() http.createServer()方法用于创建一个 Web 服务器，它的返回值就是一个http.Server实例。
1 2 3 4 5 6 7 8 9 10 11 12 13 const { createServer } = require(&amp;#39;http&amp;#39;); // 指定端口 const PORT = process.env.PORT || 8080; const server = createServer(); server.</description>
    </item>
    
    <item>
      <title>os.md</title>
      <link>https://WFUing.github.io/post/tech/language/nodejs/stdlib/os/</link>
      <pubDate>Mon, 23 Oct 2023 16:19:36 +0800</pubDate>
      
      <guid>https://WFUing.github.io/post/tech/language/nodejs/stdlib/os/</guid>
      <description>os 模块 cpus属性返回一个数组，每个成员对应一个 CPU 内核。下面代码可以获取本机的 CPU 内核数目。
1 2 const { cpus } = require(&amp;#39;os&amp;#39;); const numWorkers = cpus().length; </description>
    </item>
    
    <item>
      <title>process.md</title>
      <link>https://WFUing.github.io/post/tech/language/nodejs/stdlib/process/</link>
      <pubDate>Mon, 23 Oct 2023 16:19:36 +0800</pubDate>
      
      <guid>https://WFUing.github.io/post/tech/language/nodejs/stdlib/process/</guid>
      <description>process 对象 process对象是 Node 原生提供的对象，表示当前运行的 Node 进程。它不用引入模块，可以直接使用。
process.argv process.argv是一个数组，表示启动脚本时的命令行参数。
它的前两项是固定的。
第一项是 Node 可执行文件的路径 第二项是 JavaScript 脚本的路径 后面的数组成员都是命令行参数。
1 $ node index.js --watch 上面这个命令执行后，在index.js脚本里面，process.argv数组共有三项。
process.argv[0]：/path/to/node process.argv[1]：/path/to/index.js process.argv[2]：&amp;ndash;watch 如果只需要命令行参数，可以用解构赋值获取。
1 2 const [ , , ...args ] = process.argv; console.log(args[0]); // &amp;#34;--watch&amp;#34; 上面代码，args数组就是通过解构赋值，拿到的所有命令行参数。
参考链接 Extracting command line arguments from Node.js using destructuring, Nicholas C. Zakas </description>
    </item>
    
  </channel>
</rss>
