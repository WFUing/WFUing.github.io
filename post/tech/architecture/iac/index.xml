<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Infrastructure as Code on Waiting For You</title>
    <link>https://WFUing.github.io/post/tech/architecture/iac/</link>
    <description>Recent content in Infrastructure as Code on Waiting For You</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Fri, 17 Nov 2023 09:21:20 +0800</lastBuildDate><atom:link href="https://WFUing.github.io/post/tech/architecture/iac/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Open Application Model</title>
      <link>https://WFUing.github.io/post/tech/architecture/iac/oam/</link>
      <pubDate>Fri, 17 Nov 2023 09:21:20 +0800</pubDate>
      
      <guid>https://WFUing.github.io/post/tech/architecture/iac/oam/</guid>
      <description>Open Application Model 的目标是定义一种标准的、与基础设施无关的方法，用于描述跨混合环境、云甚至边缘设备的应用部署。该模型要解决的核心问题是如何组成分布式应用程序，然后成功地将其交给负责操作的人员。问题不在于如何编写程序，而在于如何采用面向服务（或面向微服务）架构的组件，并简化围绕此类应用的工作流程。</description>
    </item>
    
    <item>
      <title>IaC基本概念</title>
      <link>https://WFUing.github.io/post/tech/architecture/iac/concept/</link>
      <pubDate>Thu, 16 Nov 2023 10:47:45 +0800</pubDate>
      
      <guid>https://WFUing.github.io/post/tech/architecture/iac/concept/</guid>
      <description>基础架构即代码（IaC）是通过机器可读的定义文件而不是物理硬件配置或交互式配置工具来管理和配置计算机数据中心资源的过程。定义可以在版本控制系统中。定义文件中的代码可以使用脚本或声明式定义，而不是通过人工流程来维护代码，但 IaC 更经常使用声明式方法。
起源 IaC 是为了应对公用事业计算和第二代网络框架带来的困难而发展起来的。2006 年，亚马逊网络服务公司（Amazon Web Services）推出了弹性计算云（Elastic Compute Cloud），而就在几个月前，Ruby on Rails 推出了 1.0 版本，这在企业中造成了广泛的扩展问题，而以前只有大型跨国公司才会遇到这种问题。用代码对基础架构进行建模，然后利用已知的软件最佳实践来设计、实施和部署应用基础架构的想法吸引了软件开发人员和 IT 基础架构管理员。将基础架构视为代码，并使用与其他软件项目相同的工具，可以让开发人员快速部署应用程序。
优势 IaC 的价值可细分为三个可衡量的类别：成本、速度和风险。
降低成本的目的不仅是在财务上帮助企业，而且在人力和精力方面也是如此，这意味着通过消除人工部分，人们能够将精力重新集中到其他企业任务上。 基础设施自动化通过在配置基础设施时更快地执行来提高速度，并旨在提供可视性，以帮助整个企业的其他团队更快、更高效地工作。 自动化消除了与人为错误相关的风险，如手动错误配置；消除这种风险可以减少停机时间并提高可靠性。这些成果和属性有助于企业实施 DevOps 文化，即开发和运营的结合工作。 方法类型 IaC 通常有两种方法：声明式（功能性）与命令式（程序性）。声明式方法与命令式方法的区别主要在于 &amp;ldquo;是什么&amp;rdquo; 与 &amp;ldquo;如何做&amp;rdquo;。
声明式方法关注的是最终目标配置应该是什么； 命令式方法关注的是如何改变基础架构来实现这一目标。命令式方法定义了需要按适当顺序执行的特定命令，以实现预期的结论。 Methods IaC 有两种方法：push 和 pull。主要区别在于告诉服务器如何配置的方式。
在 pull 中，待配置的服务器将从控制服务器拉动其配置。 在 push 中，控制服务器将配置推送到目标系统。 持续配置自动化 所有持续配置自动化（CCA）工具都可视为传统 IaC 框架的延伸。它们利用 IaC 来更改、配置和自动化基础架构，还能提供基础架构管理方式的可视性、效率和灵活性。
社区内容是决定开源 CCA 工具质量的关键因素。正如 Gartner 所说，CCA 工具的价值 &amp;ldquo;既取决于用户社区贡献的内容和支持，也取决于自动化工具的商业成熟度和性能&amp;rdquo;。Chef 有 Chef Community Repository，Puppet 有 PuppetForge。其他供应商依靠邻近的社区，并利用其他 IaC 框架，如 PowerShell DSC。新的供应商正在出现，它们不是内容驱动型，而是模型驱动型，通过产品中的智能来提供内容。这些可视化、面向对象的系统非常适合开发人员使用，但对面向生产的 DevOps 和运营人员尤其有用，因为他们重视模型而不是脚本内容。随着该领域的不断发展和变化，基于社区的内容对于如何使用 IaC 工具将变得越来越重要，除非这些工具是模型驱动和面向对象的。</description>
    </item>
    
  </channel>
</rss>
