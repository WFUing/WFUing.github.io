<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java on WFUing&#39;s Blog</title>
    <link>https://WFUing.github.io/posts/language/java/</link>
    <description>Recent content in Java on WFUing&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>© 2024 WFUing</copyright>
    <lastBuildDate>Fri, 12 Jul 2024 23:15:08 +0800</lastBuildDate><atom:link href="https://WFUing.github.io/posts/language/java/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>JAVA 中的代码生成包 CGLIB （Code Generation Library）</title>
      <link>https://WFUing.github.io/posts/language/java/java%E4%B8%AD%E7%9A%84%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90%E5%8C%85cglib/</link>
      <pubDate>Fri, 01 Mar 2024 15:15:08 +0800</pubDate>
      
      <guid>https://WFUing.github.io/posts/language/java/java%E4%B8%AD%E7%9A%84%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90%E5%8C%85cglib/</guid>
      <description>CGLIB 是一个功能强大，高性能的代码生成包。它为没有实现接口的类提供代理，为 JDK 的动态代理提供了很好的补充。通常可以使用Java的动态代理创建代理，但当要代理的类没有实现接口或者为了更好的性能，CGLIB 是一个好的选择。</description>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://WFUing.github.io/posts/language/java/java%E4%B8%AD%E7%9A%84%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90%E5%8C%85cglib/featured.png" />
    </item>
    
    <item>
      <title>java元注解@interface</title>
      <link>https://WFUing.github.io/posts/language/java/java%E5%85%83%E6%B3%A8%E8%A7%A3@interface/</link>
      <pubDate>Wed, 07 Feb 2024 15:15:08 +0800</pubDate>
      
      <guid>https://WFUing.github.io/posts/language/java/java%E5%85%83%E6%B3%A8%E8%A7%A3@interface/</guid>
      <description>注解（Annontion）是Java5开始引入的新特征。它提供了一种安全的类似注释的机制，用来将任何的信息或元数据（metadata）与程序元素（类、方法、成员变量等）进行关联。元注解的作用就是负责注解其他注解。</description>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://WFUing.github.io/posts/language/java/java%E5%85%83%E6%B3%A8%E8%A7%A3@interface/featured.png" />
    </item>
    
    <item>
      <title>Java类加载机制</title>
      <link>https://WFUing.github.io/posts/language/java/class-loader/</link>
      <pubDate>Tue, 07 Nov 2023 23:15:08 +0800</pubDate>
      
      <guid>https://WFUing.github.io/posts/language/java/class-loader/</guid>
      <description>字节码文件需要经过加载，链接（包括验证、准备、解析），初始化才能转为类，然后才能根据类来创建对象</description>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://WFUing.github.io/posts/language/java/class-loader/featured.png" />
    </item>
    
    <item>
      <title>Junit 运行流程</title>
      <link>https://WFUing.github.io/posts/language/java/junit/</link>
      <pubDate>Sun, 05 Nov 2023 18:15:08 +0800</pubDate>
      
      <guid>https://WFUing.github.io/posts/language/java/junit/</guid>
      <description>Junit 是由 Kent Beck 和 Erich Gamma 于 1995 年底着手编写的框架，自此以后，Junit 框架日益普及，现在已经成为单元测试 Java 应用程序的事实上的标准。</description>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://WFUing.github.io/posts/language/java/junit/featured.png" />
    </item>
    
  </channel>
</rss>
