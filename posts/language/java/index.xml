<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java on WFUing&#39;s Blog</title>
    <link>https://WFUing.github.io/posts/language/java/</link>
    <description>Recent content in Java on WFUing&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>© 2024 WFUing</copyright>
    <lastBuildDate>Sat, 17 Feb 2024 16:15:08 +0800</lastBuildDate><atom:link href="https://WFUing.github.io/posts/language/java/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>VO、DTO、BO、PO、DO区别</title>
      <link>https://WFUing.github.io/posts/language/java/vodtobopodo%E5%8C%BA%E5%88%AB/</link>
      <pubDate>Sat, 17 Feb 2024 16:15:08 +0800</pubDate>
      
      <guid>https://WFUing.github.io/posts/language/java/vodtobopodo%E5%8C%BA%E5%88%AB/</guid>
      <description>VO：（View Object）视图对象，一般位于Controller层，用于展示视图。 DTO：（Data Transfer Object）数据传输对象， 即RPC 接口请求或传输出去的对象，用于展示层与服务层之间的数据传输对象。 BO：（Business Object）业务层对象，一般位于Service层，它与 DO 会有一定的属性差别。 PO：（Persistent Object）持久化对象，对象属性与数据库字段形成映射关系。 DO：（Domain Object）领域对象，就是从现实世界中抽象出来的有形或无形的业务实体，可以当成BO；（Data Object）数据层对象，对象属性与数据库字段形成映射关系，可以当成PO VO与DTO # VO：展示层需要展示的数据。 DTO：业务逻辑层需要接收的数据和返回的数据。 VO与DTO的属性值基本相同，但是VO是DTO的最终解释，可以对DTO的字段进行适当删减。 举个例子：</description>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://WFUing.github.io/posts/language/java/vodtobopodo%E5%8C%BA%E5%88%AB/featured.png" />
    </item>
    
    <item>
      <title>java元注解@interface</title>
      <link>https://WFUing.github.io/posts/language/java/java%E5%85%83%E6%B3%A8%E8%A7%A3@interface/</link>
      <pubDate>Wed, 07 Feb 2024 15:15:08 +0800</pubDate>
      
      <guid>https://WFUing.github.io/posts/language/java/java%E5%85%83%E6%B3%A8%E8%A7%A3@interface/</guid>
      <description>注解（Annontion）是Java5开始引入的新特征。它提供了一种安全的类似注释的机制，用来将任何的信息或元数据（metadata）与程序元素（类、方法、成员变量等）进行关联。元注解的作用就是负责注解其他注解。</description>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://WFUing.github.io/posts/language/java/java%E5%85%83%E6%B3%A8%E8%A7%A3@interface/featured.png" />
    </item>
    
    <item>
      <title>Java类加载机制</title>
      <link>https://WFUing.github.io/posts/language/java/class-loader/</link>
      <pubDate>Tue, 07 Nov 2023 23:15:08 +0800</pubDate>
      
      <guid>https://WFUing.github.io/posts/language/java/class-loader/</guid>
      <description>https://cloud.</description>
      
    </item>
    
    <item>
      <title>Junit 运行流程</title>
      <link>https://WFUing.github.io/posts/language/java/junit/</link>
      <pubDate>Sun, 05 Nov 2023 18:15:08 +0800</pubDate>
      
      <guid>https://WFUing.github.io/posts/language/java/junit/</guid>
      <description>Junit 是由 Kent Beck 和 Erich Gamma 于 1995 年底着手编写的框架，自此以后，Junit 框架日益普及，现在已经成为单元测试 Java 应用程序的事实上的标准。</description>
      
    </item>
    
  </channel>
</rss>
