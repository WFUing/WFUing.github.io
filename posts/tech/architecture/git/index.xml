<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Git on Waiting For You</title>
    <link>https://WFUing.github.io/posts/tech/architecture/git/</link>
    <description>Recent content in Git on Waiting For You</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Thu, 19 Oct 2023 20:58:09 +0800</lastBuildDate>
    <atom:link href="https://WFUing.github.io/posts/tech/architecture/git/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Git Principle</title>
      <link>https://WFUing.github.io/posts/tech/architecture/git/git-principle/</link>
      <pubDate>Thu, 19 Oct 2023 20:58:09 +0800</pubDate>
      <guid>https://WFUing.github.io/posts/tech/architecture/git/git-principle/</guid>
      <description>Git 和其它版本控制系统（包括 Subversion 和近似工具）的主要差别在于 Git 对待数据的方式。 从概念上来说，其它大部分系统以文件变更列表的方式存储信息，而 Git 是把数据看作是对小型文件系统的一系列快照。</description>
    </item>
    <item>
      <title>Git Tutorial</title>
      <link>https://WFUing.github.io/posts/tech/architecture/git/git-tutorial/</link>
      <pubDate>Thu, 19 Oct 2023 20:40:43 +0800</pubDate>
      <guid>https://WFUing.github.io/posts/tech/architecture/git/git-tutorial/</guid>
      <description>Git 帮助手册 国外网友制作了一张 Git Cheat Sheet，总结很精炼，各位不妨收藏一下。&#xA;本节选择性介绍 git 中比较常用的命令行场景。&#xA;安装 （1）Debian/Ubuntu 环境安装&#xA;如果你使用的系统是 Debian/Ubuntu ， 安装命令为：&#xA;1 2 3 4 5 $ apt-get install libcurl4-gnutls-dev libexpat1-dev gettext \ &amp;gt; libz-dev libssl-dev $ apt-get install git-core $ git --version git version 1.8.1.2 （2）Centos/RedHat 环境安装&#xA;如果你使用的系统是 Centos/RedHat ，安装命令为：&#xA;1 2 3 4 5 $ yum install curl-devel expat-devel gettext-devel \ &amp;gt; openssl-devel zlib-devel $ yum -y install git-core $ git --version git version 1.</description>
    </item>
    <item>
      <title>How to Write a Git Commit Message</title>
      <link>https://WFUing.github.io/posts/tech/architecture/git/how-to-write-a-git-commit-message/</link>
      <pubDate>Thu, 12 Oct 2023 19:47:45 +0800</pubDate>
      <guid>https://WFUing.github.io/posts/tech/architecture/git/how-to-write-a-git-commit-message/</guid>
      <description>Resources git tutorial: https://wyag.thb.lt/ 动图展示10大Git命令: https://zhuanlan.zhihu.com/p/132573100 git intro: https://missing.csail.mit.edu/2020/version-control/ book: https://git-scm.com/book/en/v2 commit convention 规范: https://www.conventionalcommits.org/en/v1.0.0/#summary Write yourself a Git：https://wyag.thb.lt/ 如何编写Git Commit Message? 为了创建一个有用的 revision history ，团队应该首先就 commit message convention 达成一致，至少要定义以下三点：&#xA;Style：标记语法Markup syntax, 流式布局wrap margins, 语法grammar, 大小写capitalization, 标点符号punctuation。把这些东西写出来，去掉猜测，让一切尽可能简单。 Content：提交消息的正文应该包含什么样的信息？不应该包含什么？ Metadata：如何引用 issue tracking IDs、pull request numbers 等？ 幸运的是，Git提交信息的规范已经有了很好的约定。事实上，很多 Git 命令的功能中就包含了这些约定。您不需要重新发明什么。只要遵循下面的七条规则，您就能像专家一样 commit message 了。&#xA;The seven rules of a great Git commit message&#xA;Separate subject from body with a blank line Limit the subject line to 50 characters Capitalize the subject line Do not end the subject line with a period Use the imperative mood in the subject line Wrap the body at 72 characters Use the body to explain what and why vs.</description>
    </item>
    <item>
      <title>How to Build Github Blog With Hugo</title>
      <link>https://WFUing.github.io/posts/tech/architecture/git/how-to-build-github-blog-with-hugo/</link>
      <pubDate>Thu, 12 Oct 2023 14:39:05 +0800</pubDate>
      <guid>https://WFUing.github.io/posts/tech/architecture/git/how-to-build-github-blog-with-hugo/</guid>
      <description>今天花了一点时间搭建了自己的GitHub的博客，当然咯，试验阶段总会发生很多乱七八糟的问题，记录下处理问题过程中几个比较 nice 的 blog&#xA;Resources 系列文章，用hugo的PaperMod Theme 建站: https://www.sulvblog.cn/posts/blog/ Hugo + GitHub Action，搭建你的博客自动发布系统: https://www.pseudoyu.com/zh/2022/05/29/deploy_your_blog_using_hugo_and_github_action/ PaperMod主题优化： https://kdjlyy.cn/posts/site/hugo-papermod-optimization https://dvel.me/posts/hugo-papermod-config/ </description>
    </item>
  </channel>
</rss>
