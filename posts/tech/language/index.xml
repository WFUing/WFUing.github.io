<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Language on Waiting For You</title>
    <link>https://WFUing.github.io/posts/tech/language/</link>
    <description>Recent content in Language on Waiting For You</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Mon, 16 Oct 2023 15:29:44 +0800</lastBuildDate><atom:link href="https://WFUing.github.io/posts/tech/language/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>meta-programming</title>
      <link>https://WFUing.github.io/posts/tech/language/metaprogramming/</link>
      <pubDate>Mon, 16 Oct 2023 15:29:44 +0800</pubDate>
      
      <guid>https://WFUing.github.io/posts/tech/language/metaprogramming/</guid>
      <description>元编程 (Metaprogramming) 是一种编程技术，在这种技术中，计算机程序能够将其他程序视为自己的数据。这意味着一个程序可以被设计为读取、生成、分析或转换其他程序，甚至在运行时修改自身。在某些情况下，这允许程序员最大限度地减少表达解决方案的代码行数，从而缩短开发时间。它还允许程序具有更大的灵活性，无需重新编译即可有效处理新情况。
元编程可用于将计算从运行时转移到编译时，利用编译时的计算生成代码，以及实现代码的自我修改。编程语言变成它自己的 metalanguage 的能力被称为反射。
元编程使开发人员能够编写属于通用编程范式的程序和开发代码。将编程语言本身作为一级数据类型（如 Lisp、Prolog、SNOBOL 或 Rebol）也非常有用；这就是所谓的同源性（homoiconicity）。通用编程调用了语言中的元编程工具，允许用户在编写代码时无需指定数据类型，因为在使用时，数据类型可以作为参数提供。
元编程通常有三种方式：
第一种方法是通过应用程序接口（API）（如 .NET IL 发射器的应用程序接口）向编程代码公开运行时引擎的内部结构。 第二种方法是动态执行包含编程命令的表达式，通常由字符串组成，但也可以是使用参数或上下文的其他方法，如 JavaScript。因此，&amp;ldquo;程序可以编写程序&amp;rdquo;。虽然这两种方法可以在同一种语言中使用，但大多数语言都倾向于使用其中一种方法。 </description>
    </item>
    
    <item>
      <title>Programming Language List</title>
      <link>https://WFUing.github.io/posts/tech/language/programming-language-pool/</link>
      <pubDate>Sat, 14 Oct 2023 19:29:44 +0800</pubDate>
      
      <guid>https://WFUing.github.io/posts/tech/language/programming-language-pool/</guid>
      <description>下面列出了所有类型的编程语言的完整分类列表。编程语言没有严格的分类方案。因此，我们可以将一种语言视为不止一种编程语言的示例。
让我们一一理解这些编程语言。由于列表很大，因此不可能详细讨论所有这些内容。在这里，我正在用所有这些各种编程语言的示例编写简短的介绍。
编译语言 编译语言是一种编程语言，其中我们使用编译器来编译和执行代码。编译器通常是从我们的书面源代码生成机器级代码的翻译器。
C
C ++
C＃
ALGOL
Cobol
Fortran
Java
Visual Basic
Smalltalk
解释语言 解释语言是一种编程语言，在其中，无需将程序编译为机器语言的指令，我们就可以直接自由地执行指令。解释器逐行执行程序。语言解释为编译后的实现（如平台独立性，动态范围，动态类型等）提供了更多的灵活性。
Python
Ruby
Perl
Pascal
Lisp
BASIC
APL
脚本语言 脚本语言是控制应用程序的编程语言。可以在任何其他应用程序上独立执行的脚本。它们被广泛应用于它们所控制的应用中，并被用于自动化领域。
PHP
VBScript
Windows PowerShell
F-Script
BeanShell
AutoIt
R
Game Maker Language
标记语言 标记语言是一种人工语言，用于对文档进行注释，以便在语法上与文本（可定义文本显示方式的文本）区分开。
HTML
XML
XHTML
SGML
Curl
程序语言 程序（命令式）编程意味着指定程序达到预期状态应采取的步骤。过程不过是一组可以通过过程调用引用的指令。这有助于代码的重用。这种类型的编程使程序结构化并易于跟踪程序流。
HyperTalk
Go
PL/C
PL/I
MATLAB
Curl
Mathematica
MATLAB
函数式语言 函数式编程语言将每次计算都定义为数学评估。他们专注于函数的应用。一些函数式编程语言是纯函数式语言，但是许多所谓的函数式语言是不纯净的，包含命令式功能，它们不是纯函数式语言。
Pure Functional
Agda
SAC
SASL
Cuneiform
Curry
Futhark
Haskell
不纯功能语言 APL
C++ (since C++11)</description>
    </item>
    
  </channel>
</rss>
