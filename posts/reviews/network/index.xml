<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>java-网络篇 on WFUing&#39;s Blog</title>
    <link>https://WFUing.github.io/posts/reviews/network/</link>
    <description>Recent content in java-网络篇 on WFUing&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>© 2024 WFUing</copyright>
    <lastBuildDate>Thu, 14 Mar 2024 13:19:27 +0800</lastBuildDate><atom:link href="https://WFUing.github.io/posts/reviews/network/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Socket 编程</title>
      <link>https://WFUing.github.io/posts/reviews/network/socket/</link>
      <pubDate>Thu, 14 Mar 2024 13:19:27 +0800</pubDate>
      
      <guid>https://WFUing.github.io/posts/reviews/network/socket/</guid>
      <description>针对 TCP 应该如何 Socket 编程？ # 服务端和客户端初始化 socket，得到文件描述符； 服务端调用 bind，将 socket 绑定在指定的 IP 地址和端口; 服务端调用 listen，进行监听； 服务端调用 accept，等待客户端连接； 客户端调用 connect，向服务端的地址和端口发起连接请求； 服务端 accept 返回用于传输的 socket 的文件描述符； 客户端调用 write 写入数据；服务端调用 read 读取数据； 客户端断开连接时，会调用 close，那么服务端 read 读取数据的时候，就会读取到了 EOF，待处理完数据后，服务端调用 close，表示连接关闭。 这里需要注意的是，服务端调用 accept 时，连接成功了会返回一个已完成连接的 socket，后续用来传输数据。</description>
      
    </item>
    
    <item>
      <title>Netty</title>
      <link>https://WFUing.github.io/posts/reviews/network/netty/</link>
      <pubDate>Wed, 01 Nov 2023 18:53:17 +0800</pubDate>
      
      <guid>https://WFUing.github.io/posts/reviews/network/netty/</guid>
      <description>Netty 是 JBoss 开源项目，是异步的、基于事件驱动的网络应用框架，以高性能、高并发著称。Netty 是基于 Java NIO 构建出来的，主要用于开发基于 TCP 协议的网络 IO 程序。</description>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://WFUing.github.io/posts/reviews/network/netty/featured.jpeg" />
    </item>
    
    <item>
      <title>HTTPS RSA 握手解析</title>
      <link>https://WFUing.github.io/posts/reviews/network/https-rsa/</link>
      <pubDate>Wed, 01 Nov 2023 09:43:45 +0800</pubDate>
      
      <guid>https://WFUing.github.io/posts/reviews/network/https-rsa/</guid>
      <description></description>
      
    </item>
    
    <item>
      <title>HTTP-1 HTTPS HTTP-2 HTTP-3</title>
      <link>https://WFUing.github.io/posts/reviews/network/http123-https/</link>
      <pubDate>Tue, 31 Oct 2023 14:43:45 +0800</pubDate>
      
      <guid>https://WFUing.github.io/posts/reviews/network/http123-https/</guid>
      <description>HTTP # HTTP 基本概念 # HTTP 是什么？ # HTTP 是超文本传输协议，也就是HyperText Transfer Protocol。</description>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://WFUing.github.io/posts/reviews/network/http123-https/featured.webp" />
    </item>
    
    <item>
      <title>一次完整的HTTP请求过程</title>
      <link>https://WFUing.github.io/posts/reviews/network/http-process/</link>
      <pubDate>Mon, 30 Oct 2023 19:43:45 +0800</pubDate>
      
      <guid>https://WFUing.github.io/posts/reviews/network/http-process/</guid>
      <description>Resources # 小林coding 3.</description>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://WFUing.github.io/posts/reviews/network/http-process/featured.png" />
    </item>
    
    <item>
      <title>Restful API Tutorial</title>
      <link>https://WFUing.github.io/posts/reviews/network/restful/</link>
      <pubDate>Fri, 13 Oct 2023 13:19:27 +0800</pubDate>
      
      <guid>https://WFUing.github.io/posts/reviews/network/restful/</guid>
      <description>REST 全称是 &lt;strong&gt;Re&lt;/strong&gt;presentational &lt;strong&gt;S&lt;/strong&gt;tate &lt;strong&gt;T&lt;/strong&gt;ransfer（表现层状态转化），更具体的全称是 Resource Representational State Transfer（资源表现层状态转化），具体可以见 Roy Thomas Fielding 的博士论文</description>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://WFUing.github.io/posts/reviews/network/restful/featured.png" />
    </item>
    
  </channel>
</rss>
