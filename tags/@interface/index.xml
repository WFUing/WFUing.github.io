<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>@interface on Waiting For You</title>
    <link>https://WFUing.github.io/tags/@interface/</link>
    <description>Recent content in @interface on Waiting For You</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Wed, 07 Feb 2024 15:15:08 +0800</lastBuildDate><atom:link href="https://WFUing.github.io/tags/@interface/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>java元注解@interface</title>
      <link>https://WFUing.github.io/post/tech/language/java/java%E5%85%83%E6%B3%A8%E8%A7%A3@interface/</link>
      <pubDate>Wed, 07 Feb 2024 15:15:08 +0800</pubDate>
      
      <guid>https://WFUing.github.io/post/tech/language/java/java%E5%85%83%E6%B3%A8%E8%A7%A3@interface/</guid>
      <description>jdk1.5 jdk1.5起开始提供了4个元注解，用来定义自定义注解的注解，它们分别是：
@Target 指定注解使用的目标范围（类、方法、字段等），其参考值见类的定义：java.lang.annotation.ElementType
@Documented 指定被标注的注解会包含在javadoc中。
@Retention 指定注解的生命周期（源码、class文件、运行时），其参考值见类的定义：java.lang.annotation.RetentionPolicy
@Inherited 指定子类可以继承父类的注解，只能是类上的注解，方法和字段的注解不能继承。即如果父类上的注解是 @Inherited 修饰的就能被子类继承。
jdk1.8 jdk1.8又提供了以下两个元注解
@Native 指定字段是一个常量，其值引用native code。
@Repeatable 注解上可以使用重复注解，即可以在一个地方可以重复使用同一个注解，像 spring 中的包扫描注解就使用了这个。
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 @Retention (RetentionPolicy.RUNTIME) @Target (ElementType.TYPE) @Documented @Repeatable(ComponentScans.class) public @interface ComponentScan { } @Retention (RetentionPolicy.RUNTIME) @Target (ElementType.TYPE) @Documented public @interface ComponentScans { } 所有元注解定义在 java.lang.annotation 包下面
其中 Annotation 是注解的基本接口，所有的注解都继承这个接口。
看下 @Autowired 注解的实现
其实就是继承了Annotation接口。</description>
    </item>
    
  </channel>
</rss>
